searchState.loadedDescShard("npyz", 0, "Serialize and deserialize the NumPy’s *.npy binary format…\nFixed-size inner array type.\nCode <code>as</code>.\nSubtrait of <code>Serialize</code> for types which have a reasonable …\nCode <code>&gt;</code>.\nCode <code>b</code>.\nCode <code>S</code> or <code>a</code>. Represents a zero-terminated Python 3 <code>bytes</code> (…\nIndices are arranged from slowest to fastest, so that the …\nCode <code>c</code>. Represents a complex number.\nRepresentation of a Numpy type\nIndicates that a particular rust type does not support …\nCode <code>M</code>. Represents a <code>numpy.datetime64</code>.\nCode <code>D</code>.\nTrait that permits reading a type from an <code>.npy</code> file.\nRepresents the first character in a <code>TypeStr</code>, which …\nCode <code>fs</code>.\nA field of a structured array dtype\nWrapper around <code>[u8; N]</code> that can serialize as <code>|VN</code>.  The …\nCode <code>f</code>.\nIndices are arranged from fastest to slowest, so that the …\nCode <code>h</code>.\nCode <code>i</code>.\nCode <code>|</code>. Used when endianness is irrelevant.\nCode <code>&lt;</code>.\nCode <code>us</code>.\nCode <code>ms</code>.\nCode <code>m</code>.\nCode <code>M</code>.\nCode <code>ns</code>.\nLegacy type for reading <code>npy</code> files.\nObject for reading an <code>npy</code> file.\nRepresents the parsed header portion of an <code>npy</code> file.\nIterator returned by <code>NpyFile::data</code> which reads elements of …\nInterface for writing an NPY file to a data stream.\nOrder of axes in a file.\n<code>NpyWriter</code> that writes an entire file.\nError type returned by <code>&lt;TypeStr as FromStr&gt;::parse</code>.\nCode <code>ps</code>.\nNumpy type string. First character is <code>&#39;&gt;&#39;</code> for big endian, …\nCode <code>V</code>.  Represents a binary blob of <code>size</code> bytes.\nA structure record array\nCode <code>s</code>.\nTrait that permits writing a type to an <code>.npy</code> file.\nCode <code>m</code>. Represents a <code>numpy.timedelta64</code>.\nRepresents the units of the <code>m</code> and <code>M</code> datatypes in a <code>TypeStr</code>.\nRepresents the second character in a <code>TypeStr</code>.\nLike some sort of <code>for&lt;R: io::Read&gt; Fn(R) -&gt; io::Result&lt;T&gt;</code>.\nThe proper trait to use for trait objects of <code>TypeRead</code>.\nThink of this as like a …\nRepresents an Array Interface type-string.\nLike some sort of …\nThe proper trait to use for trait objects of <code>TypeWrite</code>.\nThink of this as some sort of …\nCode <code>u</code>.\nCode <code>U</code>. Represents a Python 3 <code>str</code> (<code>unicode</code> in Python 2).\nType returned by the function.\nType accepted by the function.\nCode <code>W</code>.\nRepresents an almost-empty configuration for an <code>NpyWriter</code>.\nTrait that provides methods on <code>WriteOptions</code>.\nCode <code>Y</code>.\nFinish writing the file and close it.  Alias for …\nFinish writing the file and close it.  Alias for …\nConstruct with a custom error message.\nProduce an <code>NpyReader</code> to begin reading elements, if <code>T</code> can …\nA suggested format for serialization.\nNumpy format description of record dtype.\nGet the dtype as written in the file.\nGet the dtype as written in the file.\nThe dtype of the field\nExtract the endianness character from the type string.\nWrite an iterator to the file\nFinish writing the file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize a NPY file represented as bytes\nParse the endianness character.\nParse a character into a datatype.\nParse a header from the reader for an NPY file.\nParse a time unit string (without the surrounding …\nGets a single data-record with the specified flat index.\nGets a single data-record with the specified index.\nAccess the underlying <code>NpyHeader</code> object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead all elements into a flat <code>Vec</code>, in the order they are …\nReturns whether there are zero records in this NpyData …\nGet the remaining number of records that lie after the …\nReturns the total number of elements.\nGet the total number of elements in the file. (This is the …\nThe name of the field\nRead the header of an <code>npy</code> file and construct an <code>NpyFile</code> …\nConstruct a scalar <code>DType</code>. (one which is not a nested array …\nUtilities for working with <code>npz</code> files.\nGet the number of bytes that each item of this type …\nGet the number of bytes for a single value.\nGet the machine endianness.\nCreate a file, using the default format for the given type.\nCreate a file, using the default format for the given type.\nSet the data order for arrays with more than one dimension.\nGet whether the data is in C order or fortran order.\nAppend a single row to the file\nRead a single item at the given position, leaving the …\nThe function.\nGet a function that deserializes a single data field at a …\nMove the read cursor to the item at the given index.\nGet the shape as written in the file.\nGet the shape as written in the file.\nExtract the “size” field from the type string.  This …\nGet strides for each of the dimensions.\nExtract the time units, if this type string has any.  Only …\nSerialize an iterator over a struct to a NPY file.\nSerialize an iterator over a struct to a NPY file.\nGet the string representation of this endianness.\nGet the string representation of this datatype.  e.g. <code>&quot;i&quot;</code>.\nGet the string representation of this time unit (without …\nConstruct a vector with the deserialized contents of the …\nReturns the total number of records, including those that …\nProduce an <code>NpyReader</code> to begin reading elements, if <code>T</code> can …\nExtract the type character from the type string.\nDType to/from rust type documentation.\nConstruct from a previously parsed header and a reader for …\nThe function.\nTypes and traits related to the implementation of …\nGet a function that serializes a single data field at a …\nGet the name of the array that would correspond to the …\nGet the filename in a zip that <code>np.savez</code> would use for a …\nGet the filename in a zip that would be used for an array …\nIndicates that a Writer options type includes a DType.\nIndicates that a Writer options type includes a shape.\nIndicates that a Writer options type includes an output …\nIndicates that a Writer options type does not yet have an …\nReturn type of <code>WriterBuilder::dtype</code>.  It represents a …\nReturn type of <code>WriterBuilder::shape</code>.  It represents a …\nReturn type of <code>WriterBuilder::writer</code>.  It represents a …\nRepresents an almost-empty configuration for an <code>NpyWriter</code>.\nThe type of the output stream.\nTrait that provides methods on <code>WriteOptions</code>.\nBegin writing a 1d array, of length to be inferred from …\nBegin writing a 1d array, of length to be inferred from …\nBegin writing a 1d array, of length to be inferred from …\nBegin writing an array of the previously supplied <code>shape</code>.\nBegin writing an array of the previously supplied <code>shape</code>.\nBegin writing an array of the previously supplied <code>shape</code>.\nCalls <code>Self::dtype</code> with the default dtype for the type to …\nCalls <code>Self::dtype</code> with the default dtype for the type to …\nCalls <code>Self::dtype</code> with the default dtype for the type to …\nUse the specified dtype.\nUse the specified dtype.\nUse the specified dtype.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct an almost empty Writer configuration.\nSet the data order for arrays with more than one dimension.\nSet the shape for an n-d array.\nSet the shape for an n-d array.\nSet the shape for an n-d array.\nSet the ouput <code>Write</code> object.\nSet the ouput <code>Write</code> object.\nSet the ouput <code>Write</code> object.")
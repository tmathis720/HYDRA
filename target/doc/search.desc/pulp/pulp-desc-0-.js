searchState.loadedDescShard("pulp", 0, "<code>pulp</code> is a safe abstraction over SIMD instructions, that …\nSplits a slice into chunks of equal size (known at compile …\nSplits a slice into chunks of equal size (known at compile …\nBitmask type for 16 elements, used for mask operations on …\nBitmask type for 32 elements, used for mask operations on …\nBitmask type for 64 elements, used for mask operations on …\nBitmask type for 8 elements, used for mask operations on …\nContains the square of the norm in both the real and …\nComputes <code>conj(a) * b + c</code>\nComputes <code>conj(a) * b</code>\nSafety\nSafety\nComputes <code>a * b + c</code>\nComputes <code>a * b</code>\nContains the square of the norm in both the real and …\nComputes <code>conj(a) * b + c</code>\nComputes <code>conj(a) * b</code>\nSafety\nSafety\nComputes <code>a * b + c</code>\nComputes <code>a * b</code>\nSafe transmute function.\nSafe lossy transmute function, where the destination type …\nSafety\nSafety\nA 512-bit SIMD vector with 16 elements of type <code>f32</code>.\nA 128-bit SIMD vector with 4 elements of type <code>f32</code>.\nA 256-bit SIMD vector with 8 elements of type <code>f32</code>.\nSafety\nSafety\nA 128-bit SIMD vector with 2 elements of type <code>f64</code>.\nA 256-bit SIMD vector with 4 elements of type <code>f64</code>.\nA 512-bit SIMD vector with 8 elements of type <code>f64</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA 256-bit SIMD vector with 16 elements of type <code>i16</code>.\nA 512-bit SIMD vector with 32 elements of type <code>i16</code>.\nA 128-bit SIMD vector with 8 elements of type <code>i16</code>.\nSafety\nSafety\nA 512-bit SIMD vector with 16 elements of type <code>i32</code>.\nA 128-bit SIMD vector with 4 elements of type <code>i32</code>.\nA 256-bit SIMD vector with 8 elements of type <code>i32</code>.\nSafety\nSafety\nA 128-bit SIMD vector with 2 elements of type <code>i64</code>.\nA 256-bit SIMD vector with 4 elements of type <code>i64</code>.\nA 512-bit SIMD vector with 8 elements of type <code>i64</code>.\nA 128-bit SIMD vector with 16 elements of type <code>i8</code>.\nA 256-bit SIMD vector with 32 elements of type <code>i8</code>.\nA 512-bit SIMD vector with 64 elements of type <code>i8</code>.\nImaginary portion of the complex number\nImaginary portion of the complex number\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>false</code> if the mask bits are all zero, otherwise …\nReturns <code>false</code> if the mask bits are all zero, otherwise …\nReturns <code>false</code> if the mask bits are all zero, otherwise …\nReturns <code>false</code> if the mask bits are all zero, otherwise …\nMask type with 16 bits. Its bit either all ones or all …\nA 256-bit SIMD vector with 16 elements of type <code>m16</code>.\nA 128-bit SIMD vector with 8 elements of type <code>m16</code>.\nMask type with 32 bits. Its bit either all ones or all …\nA 128-bit SIMD vector with 4 elements of type <code>m32</code>.\nA 256-bit SIMD vector with 8 elements of type <code>m32</code>.\nMask type with 64 bits. Its bit either all ones or all …\nA 128-bit SIMD vector with 2 elements of type <code>m64</code>.\nA 256-bit SIMD vector with 4 elements of type <code>m64</code>.\nMask type with 8 bits. Its bit either all ones or all …\nA 128-bit SIMD vector with 16 elements of type <code>m8</code>.\nA 256-bit SIMD vector with 32 elements of type <code>m8</code>.\nReturns a mask with all bits set one, if <code>flag</code> is true, …\nReturns a mask with all bits set one, if <code>flag</code> is true, …\nReturns a mask with all bits set one, if <code>flag</code> is true, …\nReturns a mask with all bits set one, if <code>flag</code> is true, …\nReal portion of the complex number\nReal portion of the complex number\nA 256-bit SIMD vector with 16 elements of type <code>u16</code>.\nA 512-bit SIMD vector with 32 elements of type <code>u16</code>.\nA 128-bit SIMD vector with 8 elements of type <code>u16</code>.\nSafety\nSafety\nA 512-bit SIMD vector with 16 elements of type <code>u32</code>.\nA 128-bit SIMD vector with 4 elements of type <code>u32</code>.\nA 256-bit SIMD vector with 8 elements of type <code>u32</code>.\nSafety\nSafety\nA 128-bit SIMD vector with 2 elements of type <code>u64</code>.\nA 256-bit SIMD vector with 4 elements of type <code>u64</code>.\nA 512-bit SIMD vector with 8 elements of type <code>u64</code>.\nA 128-bit SIMD vector with 16 elements of type <code>u8</code>.\nA 256-bit SIMD vector with 32 elements of type <code>u8</code>.\nA 512-bit SIMD vector with 64 elements of type <code>u8</code>.\nLow level x86 API.\nSSE instruction set.\nAVX instruction set.\nAVX instruction set using only scalar instructions.\nComputes the absolute value of the elements of each lane …\nComputes the absolute value of the elements of each lane …\nComputes the absolute value of the elements of each lane …\nComputes the absolute value of the elements of each lane …\nAdds the elements of each lane of <code>a</code> and <code>b</code>.\nAdds the elements of each lane of <code>a</code> and <code>b</code>.\nAdds the elements of each lane of <code>a</code> and <code>b</code>.\nAdds the elements of each lane of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nReturns the bitwise AND of NOT <code>a</code> and <code>b</code>.\nApplies the sign of each element of <code>sign</code> to the …\nApplies the sign of each element of <code>sign</code> to the …\nApplies the sign of each element of <code>sign</code> to the …\nApplies the sign of each element of <code>sign</code> to the …\nApplies the sign of each element of <code>sign</code> to the …\nApplies the sign of each element of <code>sign</code> to the …\nComputes the approximate reciprocal of the elements of …\nComputes the approximate reciprocal of the elements of …\nComputes the approximate reciprocal of the square roots of …\nComputes the approximate reciprocal of the square roots of …\nAverages the elements of each lane of <code>a</code> and <code>b</code>.\nAverages the elements of each lane of <code>a</code> and <code>b</code>.\nAverages the elements of each lane of <code>a</code> and <code>b</code>.\nAverages the elements of each lane of <code>a</code> and <code>b</code>.\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nRounds the elements of each lane of <code>a</code> to the nearest …\nRounds the elements of each lane of <code>a</code> to the nearest …\nRounds the elements of each lane of <code>a</code> to the nearest …\nRounds the elements of each lane of <code>a</code> to the nearest …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for equality.\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nCompares the elements in each lane of <code>a</code> and <code>b</code> for …\nConverts a <code>f32x4</code> to <code>f64x2</code>, elementwise, while truncating …\nConverts a <code>f32x4</code> to <code>f64x4</code>, elementwise.\nConverts a <code>f32x4</code> to <code>i32x4</code>, elementwise.\nConverts a <code>f32x8</code> to <code>i32x8</code>, elementwise.\nConverts a <code>f64x2</code> to <code>f32x4</code>, elementwise, filling the …\nConverts a <code>f64x2</code> to <code>i32x4</code>, elementwise.\nConverts a <code>f64x4</code> to <code>f32x4</code>, elementwise.\nConverts a <code>f64x4</code> to <code>i32x4</code>, elementwise.\nConverts a <code>i16x16</code> to <code>u16x16</code>, elementwise.\nConverts a <code>i16x8</code> to <code>i32x4</code>, elementwise, while truncating …\nConverts a <code>i16x8</code> to <code>i32x8</code>, elementwise.\nConverts a <code>i16x8</code> to <code>i64x2</code>, elementwise, while truncating …\nConverts a <code>i16x8</code> to <code>i64x4</code>, elementwise, while truncating …\nConverts a <code>i16x8</code> to <code>u16x8</code>, elementwise.\nConverts a <code>i16x8</code> to <code>u32x4</code>, elementwise, while truncating …\nConverts a <code>i16x8</code> to <code>u32x8</code>, elementwise.\nConverts a <code>i16x8</code> to <code>u64x2</code>, elementwise, while truncating …\nConverts a <code>i16x8</code> to <code>u64x4</code>, elementwise, while truncating …\nConverts a <code>i32x4</code> to <code>f32x4</code>, elementwise.\nConverts a <code>i32x4</code> to <code>f64x2</code>, elementwise, while truncating …\nConverts a <code>i32x4</code> to <code>f64x4</code>, elementwise.\nConverts a <code>i32x4</code> to <code>i64x2</code>, elementwise, while truncating …\nConverts a <code>i32x4</code> to <code>i64x4</code>, elementwise.\nConverts a <code>i32x4</code> to <code>u32x4</code>, elementwise.\nConverts a <code>i32x4</code> to <code>u64x2</code>, elementwise, while truncating …\nConverts a <code>i32x4</code> to <code>u64x4</code>, elementwise.\nConverts a <code>i32x8</code> to <code>f32x8</code>, elementwise.\nConverts a <code>i32x8</code> to <code>u32x8</code>, elementwise.\nConverts a <code>i8x16</code> to <code>i16x16</code>, elementwise.\nConverts a <code>i8x16</code> to <code>i16x8</code>, elementwise, while truncating …\nConverts a <code>i8x16</code> to <code>i32x4</code>, elementwise, while truncating …\nConverts a <code>i8x16</code> to <code>i32x8</code>, elementwise, while truncating …\nConverts a <code>i8x16</code> to <code>i64x2</code>, elementwise, while truncating …\nConverts a <code>i8x16</code> to <code>i64x4</code>, elementwise, while truncating …\nConverts a <code>i8x16</code> to <code>u16x16</code>, elementwise.\nConverts a <code>i8x16</code> to <code>u16x8</code>, elementwise, while truncating …\nConverts a <code>i8x16</code> to <code>u32x4</code>, elementwise, while truncating …\nConverts a <code>i8x16</code> to <code>u32x8</code>, elementwise, while truncating …\nConverts a <code>i8x16</code> to <code>u64x2</code>, elementwise, while truncating …\nConverts a <code>i8x16</code> to <code>u64x4</code>, elementwise, while truncating …\nConverts a <code>i8x16</code> to <code>u8x16</code>, elementwise.\nConverts a <code>i8x32</code> to <code>u8x32</code>, elementwise.\nConverts a <code>u16x16</code> to <code>i16x16</code>, elementwise.\nConverts a <code>u16x8</code> to <code>i16x8</code>, elementwise.\nConverts a <code>u16x8</code> to <code>i32x4</code>, elementwise, while truncating …\nConverts a <code>u16x8</code> to <code>i32x8</code>, elementwise.\nConverts a <code>u16x8</code> to <code>i64x2</code>, elementwise, while truncating …\nConverts a <code>u16x8</code> to <code>i64x4</code>, elementwise, while truncating …\nConverts a <code>u16x8</code> to <code>u32x4</code>, elementwise, while truncating …\nConverts a <code>u16x8</code> to <code>u32x8</code>, elementwise.\nConverts a <code>u16x8</code> to <code>u64x2</code>, elementwise, while truncating …\nConverts a <code>u16x8</code> to <code>u64x4</code>, elementwise, while truncating …\nConverts a <code>u32x4</code> to <code>i32x4</code>, elementwise.\nConverts a <code>u32x4</code> to <code>i64x2</code>, elementwise, while truncating …\nConverts a <code>u32x4</code> to <code>i64x4</code>, elementwise.\nConverts a <code>u32x4</code> to <code>u64x2</code>, elementwise, while truncating …\nConverts a <code>u32x4</code> to <code>u64x4</code>, elementwise.\nConverts a <code>u32x8</code> to <code>i32x8</code>, elementwise.\nConverts a <code>u8x16</code> to <code>i16x16</code>, elementwise.\nConverts a <code>u8x16</code> to <code>i16x8</code>, elementwise, while truncating …\nConverts a <code>u8x16</code> to <code>i32x4</code>, elementwise, while truncating …\nConverts a <code>u8x16</code> to <code>i32x8</code>, elementwise, while truncating …\nConverts a <code>u8x16</code> to <code>i64x2</code>, elementwise, while truncating …\nConverts a <code>u8x16</code> to <code>i64x4</code>, elementwise, while truncating …\nConverts a <code>u8x16</code> to <code>i8x16</code>, elementwise.\nConverts a <code>u8x16</code> to <code>u16x16</code>, elementwise.\nConverts a <code>u8x16</code> to <code>u16x8</code>, elementwise, while truncating …\nConverts a <code>u8x16</code> to <code>u32x4</code>, elementwise, while truncating …\nConverts a <code>u8x16</code> to <code>u32x8</code>, elementwise, while truncating …\nConverts a <code>u8x16</code> to <code>u64x2</code>, elementwise, while truncating …\nConverts a <code>u8x16</code> to <code>u64x4</code>, elementwise, while truncating …\nConverts a <code>u8x32</code> to <code>i8x32</code>, elementwise.\nDivides the elements of each lane of <code>a</code> and <code>b</code>.\nDivides the elements of each lane of <code>a</code> and <code>b</code>.\nDivides the elements of each lane of <code>a</code> and <code>b</code>.\nDivides the elements of each lane of <code>a</code> and <code>b</code>.\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nRounds the elements of each lane of <code>a</code> to the nearest …\nRounds the elements of each lane of <code>a</code> to the nearest …\nRounds the elements of each lane of <code>a</code> to the nearest …\nRounds the elements of each lane of <code>a</code> to the nearest …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSee <code>_mm_hadd_ps</code>.\nSee <code>_mm256_hadd_ps</code>.\nSee <code>_mm_hadd_pd</code>.\nSee <code>_mm256_hadd_pd</code>.\nSee <code>_mm256_hadd_epi16</code>.\nSee <code>_mm_hadd_epi16</code>.\nSee <code>_mm_hadd_epi32</code>.\nSee <code>_mm256_hadd_epi32</code>.\nSee <code>_mm256_hadds_epi16</code>\nSee <code>_mm_hadds_epi16</code>\nSee <code>_mm256_hsubs_epi16</code>\nSee <code>_mm_hsubs_epi16</code>\nSee <code>_mm_hsub_ps</code>\nSee <code>_mm256_hsub_ps</code>\nSee <code>_mm_hsub_pd</code>\nSee <code>_mm256_hsub_pd</code>\nSee <code>_mm256_hsub_epi16</code>\nSee <code>_mm_hsub_epi16</code>\nSee <code>_mm_hsub_epi32</code>\nSee <code>_mm256_hsub_epi32</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the required CPU features for this type …\nReturns <code>true</code> if the required CPU features for this type …\nReturns <code>true</code> if the required CPU features for this type …\nChecks if the elements in each lane of <code>a</code> are NaN.\nChecks if the elements in each lane of <code>a</code> are NaN.\nChecks if the elements in each lane of <code>a</code> are NaN.\nChecks if the elements in each lane of <code>a</code> are NaN.\nChecks if the elements in each lane of <code>a</code> are not NaN.\nChecks if the elements in each lane of <code>a</code> are not NaN.\nChecks if the elements in each lane of <code>a</code> are not NaN.\nChecks if the elements in each lane of <code>a</code> are not NaN.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise maximum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nComputes the elementwise minimum of each lane of <code>a</code> and <code>b</code>.\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and adds …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and adds …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and adds …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and adds …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>.\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>.\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>.\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>.\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nSee <code>_mm_maddubs_epi16</code>\nSee <code>_mm256_maddubs_epi16</code>\nSee <code>_mm256_madd_epi16</code>\nSee <code>_mm_madd_epi16</code>\nSee <code>_mm_mpsadbw_epu8</code>.\nSee <code>_mm256_mpsadbw_epu8</code>.\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, negates …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, negates …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, negates …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, negates …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements in each lane of <code>a</code> and <code>b</code>, and …\nReturns a SIMD token type without checking if the required …\nReturns a SIMD token type without checking if the required …\nReturns a SIMD token type without checking if the required …\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise NOT of <code>a</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nReturns the bitwise OR of <code>a</code> and <code>b</code>.\nSee <code>_mm256_packs_epi16</code>\nSee <code>_mm_packs_epi16</code>\nSee <code>_mm_packs_epi32</code>\nSee <code>_mm256_packs_epi32</code>\nSee <code>_mm256_packus_epi16</code>\nSee <code>_mm_packus_epi16</code>\nSee <code>_mm_packus_epi32</code>\nSee <code>_mm256_packus_epi32</code>\nRounds the elements of each lane of <code>a</code> to the nearest …\nRounds the elements of each lane of <code>a</code> to the nearest …\nRounds the elements of each lane of <code>a</code> to the nearest …\nRounds the elements of each lane of <code>a</code> to the nearest …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with saturation.\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with saturation.\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with saturation.\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with saturation.\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with saturation.\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with saturation.\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with saturation.\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with saturation.\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nCombines <code>if_true</code> and <code>if_false</code>, selecting elements from …\nShift the bits of each lane of <code>a</code> to the left by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the left by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the left by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the left by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the left by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the left by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the left by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the left by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the left by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the left by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the left by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the left by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the left by the …\nShift the bits of each lane of <code>a</code> to the left by the …\nShift the bits of each lane of <code>a</code> to the left by the …\nShift the bits of each lane of <code>a</code> to the left by the …\nShift the bits of each lane of <code>a</code> to the left by the …\nShift the bits of each lane of <code>a</code> to the left by the …\nShift the bits of each lane of <code>a</code> to the left by the …\nShift the bits of each lane of <code>a</code> to the left by the …\nShift the bits of each lane of <code>a</code> to the left by the first …\nShift the bits of each lane of <code>a</code> to the left by the first …\nShift the bits of each lane of <code>a</code> to the left by the first …\nShift the bits of each lane of <code>a</code> to the left by the first …\nShift the bits of each lane of <code>a</code> to the left by the first …\nShift the bits of each lane of <code>a</code> to the left by the first …\nShift the bits of each lane of <code>a</code> to the left by the first …\nShift the bits of each lane of <code>a</code> to the left by the first …\nShift the bits of each lane of <code>a</code> to the left by the first …\nShift the bits of each lane of <code>a</code> to the left by the first …\nShift the bits of each lane of <code>a</code> to the left by the first …\nShift the bits of each lane of <code>a</code> to the left by the first …\nShift the bits of each lane of <code>a</code> to the right by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the right by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the right by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the right by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the right by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the right by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the right by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the right by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the right by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the right by <code>AMOUNT</code>, …\nShift the bits of each lane of <code>a</code> to the right by the …\nShift the bits of each lane of <code>a</code> to the right by the …\nShift the bits of each lane of <code>a</code> to the right by the …\nShift the bits of each lane of <code>a</code> to the right by the …\nShift the bits of each lane of <code>a</code> to the right by the …\nShift the bits of each lane of <code>a</code> to the right by the …\nShift the bits of each lane of <code>a</code> to the right by the first …\nShift the bits of each lane of <code>a</code> to the right by the first …\nShift the bits of each lane of <code>a</code> to the right by the first …\nShift the bits of each lane of <code>a</code> to the right by the first …\nShift the bits of each lane of <code>a</code> to the right by the first …\nShift the bits of each lane of <code>a</code> to the right by the first …\nShift the bits of each lane of <code>a</code> to the right by the first …\nShift the bits of each lane of <code>a</code> to the right by the first …\nShift the bits of each lane of <code>a</code> to the right by the first …\nShift the bits of each lane of <code>a</code> to the right by the first …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nReturns a SIMD vector with all lanes set to the given …\nComputes the square roots of the elements of each lane of <code>a</code>…\nComputes the square roots of the elements of each lane of <code>a</code>…\nComputes the square roots of the elements of each lane of <code>a</code>…\nComputes the square roots of the elements of each lane of <code>a</code>…\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>.\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>.\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>.\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>.\nAlternatively subtracts and adds the elements of each lane …\nAlternatively subtracts and adds the elements of each lane …\nAlternatively subtracts and adds the elements of each lane …\nAlternatively subtracts and adds the elements of each lane …\nSee <code>_mm_sad_epu8</code>\nSee <code>_mm256_sad_epu8</code>\nTakes a proof of the existence of this SIMD token (<code>self</code>), …\nTakes a proof of the existence of this SIMD token (<code>self</code>), …\nTakes a proof of the existence of this SIMD token (<code>self</code>), …\nRounds the elements of each lane of <code>a</code> to the nearest …\nRounds the elements of each lane of <code>a</code> to the nearest …\nRounds the elements of each lane of <code>a</code> to the nearest …\nRounds the elements of each lane of <code>a</code> to the nearest …\nReturns a SIMD token type if the required CPU features for …\nReturns a SIMD token type if the required CPU features for …\nReturns a SIMD token type if the required CPU features for …\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nComputes the unsigned absolute value of the elements of …\nComputes the unsigned absolute value of the elements of …\nComputes the unsigned absolute value of the elements of …\nComputes the unsigned absolute value of the elements of …\nComputes the unsigned absolute value of the elements of …\nComputes the unsigned absolute value of the elements of …\nVectorizes the given function as if the CPU features for …\nVectorizes the given function as if the CPU features for …\nVectorizes the given function as if the CPU features for …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, and …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, and …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nAdds the elements of each lane of <code>a</code> and <code>b</code>, with wrapping …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, with …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, with …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, with …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, with …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, with …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, with …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, with …\nMultiplies the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nSubtracts the elements of each lane of <code>a</code> and <code>b</code>, with …\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.\nReturns the bitwise XOR of <code>a</code> and <code>b</code>.")
searchState.loadedDescShard("dyn_stack", 0, "Stack that allows users to allocate dynamically sized …\nOwns an unsized array of data, allocated from some stack.\nStack wrapper around a buffer of uninitialized bytes.\nStack wrapper around a buffer of bytes.\nMutable reborrowing.\nSize overflow error during the computation of stack …\nStack allocation requirements.\nThe alignment of allocated bytes required.\nThe required allocation to allocate storage sufficient for …\nThe required allocation to allocate storage sufficient for …\nThe required allocation to allocate storage sufficient for …\nReturns a pointer to the (possibly uninitialized) stack …\nReturns a pointer to the stack memory.\nReturns <code>true</code> if the stack can hold an allocation with the …\nReturns <code>true</code> if the stack can hold an allocation with the …\nReturns a new <code>DynArray</code>, initialized with the provided …\nReturns a new slice, initialized with the provided …\nReturns a new aligned <code>DynArray</code>, initialized with the …\nReturns a new aligned slice, initialized with the provided …\nAllocation requirements for an empty unaligned buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of bytes that this stack can hold.\nReturns the number of bytes that this stack can hold.\nReturns a new aligned and uninitialized slice and a stack …\nReturns a new aligned and uninitialized <code>DynArray</code> and a …\nReturns a new aligned <code>DynArray</code>, initialized with the …\nReturns a new aligned slice, initialized with the provided …\nReturns a new uninitialized slice and a stack over the …\nReturns a new uninitialized <code>DynArray</code> and a stack over the …\nReturns a new <code>DynArray</code>, initialized with the provided …\nReturns a new slice, initialized with the provided …\nReturns a new <code>DynStack</code> from the provided memory buffer.\nReturns a new <code>PodStack</code> from the provided memory buffer.\nAllocation requirements sufficient for <code>n</code> elements of type <code>T</code>…\nAllocation requirements sufficient for <code>n</code> elements of type <code>T</code>…\nThe required allocation to allocate storage sufficient for …\nThe number of allocated bytes required, aligned to …\nSame as <code>StackReq::all_of</code>, but returns an error if the size …\nSame as <code>StackReq::and</code>, but returns an error if the size …\nSame as <code>StackReq::any_of</code>, but returns an error if the size …\nSame as <code>StackReq::new</code>, but returns an error in case the …\nSame as <code>StackReq::new_aligned</code>, but returns an error in …\nSame as <code>StackReq::or</code>, but returns an error if the size …\nSame as <code>StackReq::unaligned_bytes_required</code>, but returns an …\nThe number of allocated bytes required, with no alignment …\nError during memory allocation.\nBuffer of uninitialized bytes to serve as workspace for …\nBuffer of initialized bytes to serve as workspace for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>GlobalMemBuffer</code>\tfrom its raw components.\nCreates a <code>GlobalPodBuffer</code>\tfrom its raw components.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecomposes a <code>GlobalMemBuffer</code> into its raw components in …\nDecomposes a <code>GlobalPodBuffer</code> into its raw components in …\nAllocate a memory buffer with sufficient storage for the …\nAllocate a memory buffer with sufficient storage for the …\nAllocate a memory buffer with sufficient storage for the …\nAllocate a memory buffer with sufficient storage for the …")
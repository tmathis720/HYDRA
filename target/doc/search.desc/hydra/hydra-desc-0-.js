searchState.loadedDescShard("hydra", 0, "Overview of the <code>src/boundary/</code> Module\nOverview of the <code>src/domain/</code> Module\nOverview of the <code>src/geometry/</code> Module\nBoundaryCondition represents various types of boundary …\nThe BoundaryConditionApply trait defines the <code>apply</code> method, …\nThe BoundaryConditionHandler struct is responsible for …\nApplies a boundary condition to a specific mesh entity, …\nApplies the boundary condition to a specific mesh entity.\nApplies the boundary conditions to the system matrices and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the boundary condition applied to a specific …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new BoundaryConditionHandler with an empty …\nSets a boundary condition for a specific mesh entity. The …\nThe <code>DirichletBC</code> struct represents a handler for applying …\nApplies the stored Dirichlet boundary conditions for a …\nApplies the stored Dirichlet boundary conditions to the …\nApplies a constant Dirichlet boundary condition to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>DirichletBC</code> with an empty …\nSets a Dirichlet boundary condition for a specific mesh …\nThe <code>NeumannBC</code> struct represents a handler for applying …\nApplies the stored Neumann boundary conditions for a …\nApplies the stored Neumann boundary conditions to the …\nApplies a constant Neumann boundary condition to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>NeumannBC</code> with an empty section …\nSets a Neumann boundary condition for a specific mesh …\nThe <code>RobinBC</code> struct represents a handler for applying Robin …\nApplies the stored Robin boundary conditions for a …\nApplies the stored Robin boundary conditions to both the …\nApplies a Robin boundary condition to the system matrix …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>RobinBC</code> with an empty section to …\nSets a Robin boundary condition for a specific mesh entity.\nRe-exports key components from the <code>mesh_entity</code>, <code>sieve</code>, and …\nRe-exports key components from the <code>mesh_entity</code>, <code>sieve</code>, and …\nRepresents the mesh structure, which is composed of a …\nAdds an arrow from one mesh entity to another in the sieve …\nAdds a new <code>MeshEntity</code> to the mesh. The entity will be …\nEstablishes a relationship (arrow) between two mesh …\nApplies a reordering to the mesh entities based on the …\nAn optional channel receiver for receiving boundary data …\nAn optional channel sender for transmitting boundary data …\nComputes properties for each entity in the mesh in …\nCounts the number of entities of a specified type (e.g., …\nA thread-safe, read-write lock for managing mesh entities. …\nReturns the argument unchanged.\nComputes the centroid of a cell based on its vertices.\nDetermines the shape of a cell based on the number of …\nRetrieves the vertices of a cell and their coordinates.\nRetrieves all the <code>Cell</code> entities from the mesh.\nRetrieves all the cells that share the given face.\nComputes the Euclidean distance between two cells based on …\nComputes the area of a face based on its geometric shape …\nRetrieves the vertices of a face and their coordinates.\nRetrieves all the <code>Face</code> entities from the mesh.\nRetrieves all the faces of a given cell.\nRetrieves all vertices connected to the given vertex by …\nRetrieves the 3D coordinates of a vertex by its identifier.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the IDs of all vertices in the …\nComputes the Morton order (Z-order curve) for a 2D point …\nCreates a new instance of the <code>Mesh</code> struct with initialized …\nApplies a given function to each entity in the mesh in …\nComputes the reverse Cuthill-McKee (RCM) ordering starting …\nReceives boundary data from the communication channel and …\nReorders elements in the mesh using Morton order (Z-order …\nSends the local boundary data (such as vertex coordinates) …\nSets the communication channels for boundary data …\nSets the 3D coordinates for a vertex and adds the vertex …\nThe sieve structure used for organizing the mesh entities…\nSynchronizes the boundary data by first sending the local …\nA map from vertex indices to their 3D coordinates.  \nA branch node representing a refined element with child …\nA leaf node representing an unrefined element containing …\nAn iterator for traversing through leaf nodes in the …\nRepresents a hierarchical mesh node, which can either be a …\nApplies constraints at hanging nodes to ensure continuity …\nCoarsens a branch back into a leaf node by collapsing its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all leaf nodes in the mesh …\nReturns the next leaf node in the traversal. If the …\nRefines a leaf node into a branch with initialized child …\nReorders mesh entities using the Cuthill-McKee algorithm. …\nA struct representing a directed relationship between two …\nRepresents an entity in a mesh, such as a vertex, edge, …\nConverts a generic entity type that implements …\nReturns the type of the <code>MeshEntity</code> as a string, indicating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a tuple reference of the “from” and “to” …\nReturns the unique identifier associated with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Arrow</code> between two mesh entities.\nThe <code>Delta</code> struct manages transformation data for <code>MeshEntity</code>…\nThe <code>Overlap</code> struct manages two sets of <code>MeshEntity</code> elements:\nAdds a <code>MeshEntity</code> to the set of ghost entities.\nAdds a <code>MeshEntity</code> to the set of local entities.\nApplies a function to all entities in the delta.\nA thread-safe map storing transformation data associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the transformation data associated with a …\nRetrieves a clone of all ghost entities.\nA thread-safe set of ghost entities.  \nChecks if there is transformation data for a specific …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a <code>MeshEntity</code> is a ghost entity.\nChecks if a <code>MeshEntity</code> is a local entity.\nRetrieves a clone of all local entities.\nA thread-safe set of local entities.  \nMerges another <code>Overlap</code> instance into this one, combining …\nMerges another <code>Delta</code> instance into this one, combining …\nCreates a new <code>Overlap</code> with empty sets for local and ghost …\nCreates a new, empty <code>Delta</code>.\nRemoves the transformation data associated with a specific …\nSets the transformation data for a specific <code>MeshEntity</code>.\nA generic <code>Section</code> struct that associates data of type <code>T</code> …\nRetrieves all data stored in the section as immutable …\nRetrieves all data stored in the section with mutable …\nClears all data from the section, removing all entity …\nA thread-safe map storing data of type <code>T</code> associated with …\nRetrieves all <code>MeshEntity</code> objects associated with the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Section</code> with an empty data map.\nApplies the given function in parallel to update all data …\nRestricts the data for a given <code>MeshEntity</code> by returning an …\nRestricts the data for a given <code>MeshEntity</code> by returning a …\nSets the data associated with a given <code>MeshEntity</code>. This …\nUpdates the data for a specific <code>MeshEntity</code> by replacing …\nA <code>Sieve</code> struct that manages the relationships (arrows) …\nAdds a directed relationship (arrow) between two <code>MeshEntity</code>…\nA thread-safe adjacency map where each key is a <code>MeshEntity</code>,\nComputes the transitive closure for a given <code>MeshEntity</code>. …\nRetrieves all entities directly related to the given …\nInfers and adds missing edges (in 2D) or faces (in 3D) …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the join operation for two entities, <code>p</code> and <code>q</code>. …\nComputes the meet operation for two entities, <code>p</code> and <code>q</code>. …\nCreates a new empty <code>Sieve</code> instance with an empty adjacency …\nApplies a given function in parallel to all adjacency map …\nComputes the star of a given <code>MeshEntity</code>. The star includes …\nOrganizes the mesh entities in the sieve into strata based …\nRetrieves all entities that support the given entity (<code>point</code>…\n<code>CellShape</code> enumerates the different cell shapes in a mesh, …\n<code>FaceShape</code> enumerates the different face shapes in a mesh, …\nThe <code>Geometry</code> struct stores geometric data for a mesh, …\nThe <code>GeometryCache</code> struct stores computed properties of …\nComputes the centroid of a given cell based on its shape …\nComputes the volume of a given cell based on its shape and …\nComputes the Euclidean distance between two points in 3D …\nComputes the area of a 2D face based on its shape.\nComputes the centroid of a 2D face based on its shape.\nComputes the centroid of a hexahedral cell (e.g., a cube …\nComputes the volume of a hexahedral cell using tetrahedral …\nComputes the centroid of a triangular prism.\nComputes the volume of a triangular prism.\nComputes the centroid of a pyramid cell (triangular or …\nComputes the volume of a pyramid cell (triangular or …\nComputes the area of a quadrilateral face by dividing it …\nComputes the centroid of a quadrilateral face.\nComputes the centroid of a tetrahedral cell.\nComputes the volume of a tetrahedral cell.\nComputes the total centroid of all cells.\nComputes the total volume of all cells in the geometry.\nComputes the area of a triangular face.\nComputes the centroid of a triangular face.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes a new <code>Geometry</code> instance with empty data.\nAdds or updates a vertex in the geometry. If the vertex …\nUpdates all cell volumes in parallel by computing them for …\nConverts the matrix to a slice of its underlying data in …\nComputes the Frobenius norm of the matrix. The Frobenius …\nComputes the trace of the matrix (sum of diagonal …\nThe scalar type of the vector elements.\nTrait defining a set of common operations for vectors. It …\nProvides a slice of the underlying data.\nPerforms the operation <code>self = a * x + self</code>, also known as …\nComputes the cross product with another vector <code>other</code> (for …\nComputes the dot product of <code>self</code> with another vector <code>other</code>.\nAdds another vector <code>other</code> to <code>self</code> element-wise.\nDivides <code>self</code> by another vector <code>other</code> element-wise.\nMultiplies <code>self</code> by another vector <code>other</code> element-wise.\nRetrieves the element at index <code>i</code>.\nReturns the length (number of elements) of the vector.\nReturns the maximum element of the vector.\nReturns the mean value of the vector.\nReturns the minimum element of the vector.\nComputes the Euclidean norm (L2 norm) of the vector.\nScales the vector by multiplying each element by the …\nSets the element at index <code>i</code> to <code>value</code>.\nComputes the sum of all elements in the vector.\nReturns the variance of the vector.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTime Stepping module\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait representing a time-dependent problem, such as a …\nTrait for time-stepping methods.\nError type for time-stepping operations.\nPerforms an adaptive time step, if applicable.\nComputes the right-hand side (RHS) of the system at a …\nReturns the argument unchanged.\nReturns a matrix representation of the system if …\nReturns the initial state of the system at the beginning …\nCalls <code>U::from(self)</code>.\nSets the time interval for the simulation.\nSets the time step size for the simulation.\nSolves the linear system <code>A * x = b</code> for implicit …\nPerforms a single time step.\nConverts time to the scalar type of the vector.")
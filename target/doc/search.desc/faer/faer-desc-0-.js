searchState.loadedDescShard("faer", 0, "<code>faer</code> is a general-purpose linear algebra library for Rust, …\nMust have the same layout as <code>Self</code>, and <code>Canonical::Unit</code> …\nUnstable trait containing the operations that a number …\nWhether a matrix should be implicitly conjugated when read …\nMust have the same layout as <code>Self</code>, and <code>Conj::Unit</code> must …\nTrait for types that may be implicitly conjugated.\nUnstable core trait for describing how a scalar value may …\nEqually-sized index type with a fixed size (no <code>usize</code>).\nTrait for unsigned integers that can be indexed with.\nLower half should be accessed.\nMaximum representable value.\nDo not conjugate.\nNo parallelism.\nParallelism strategy that can be passed to most of the …\nRayon parallelism. Only available with the <code>rayon</code> feature.\nUnstable trait containing the operations that a real …\nFactor for matrix-scalar multiplication.\nSpecifies whether the triangular lower or upper part of a …\nEqually-sized signed index type.\nTrait for signed integers corresponding to the ones …\nUpper half should be accessed.\nDo conjugate.\nCompare matrices for exact or approximate equality.\nPerforms the implicit conjugation operation on the given …\nConvert a reference to a slice of <code>Self</code> to fixed width …\nConvert a mutable reference to a slice of <code>Self</code> to fixed …\nColumn vector type.\nCreates a <code>col::Col</code> containing the arguments.\nNative complex floating point types whose real and …\nCombine <code>self</code> and <code>other</code> to create a new conjugation object.\nConcatenates the matrices in each row horizontally, then …\nSimilar to the <code>dbg</code> macro, but takes a format spec as a …\nDiagonal matrix type.\nCauses functions that access global parallelism settings …\nReturns the absolute value of <code>self</code>.\nReturns the squared absolute value of <code>self</code>.\nReturns <code>self + rhs</code>.\nReturns <code>conjugate(self)</code>.\nConverts <code>value</code> from <code>f64</code> to <code>Self</code>. The conversion may be …\nReturns a complex number whose real part is equal to <code>real</code>, …\nReturns the imaginary part.\nReturns <code>1.0/self</code>.\nReturns true if <code>self</code> is a NaN value, or false otherwise.\nReturns true if <code>self</code> is a NaN value, or false otherwise.\nReturns <code>self * rhs</code>.\nReturns a NaN value.\nReturns <code>-self</code>.\nReturns <code>1.0</code>.\nReturns the real part.\nReturns the input, scaled by <code>rhs</code>.\nReturns the input, scaled by <code>rhs</code>.\nReturns either the norm or squared norm of the number.\nReturns the square root of <code>self</code>.\nReturns <code>self - rhs</code>.\nReturns <code>0.0</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a signed value to an unsigned one.\nGets the global parallelism settings.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDe-serialization from common matrix file formats.\nIterators and related utilities.\nLinear algebra module.\nMatrix type.\nCreates a <code>Mat</code> containing the arguments.\nRe-exports.\nPermutation matrices.\nfaer prelude. Includes useful types and traits for solving …\nRow vector type.\nCreates a <code>row::Row</code> containing the arguments.\nReturns a factor for matrix-scalar multiplication.\nSets the global parallelism settings.\nMatrix solvers and decompositions.\nSparse data structures and algorithms. Sparse matrix data …\nStatistics-related utilities.\nSum values while checking for overflow.\nSum nonnegative values while checking for overflow.\nSign extend <code>self</code>.\nConvert an unsigned value to a signed one.\nTruncate <code>value</code> to type <code>Self</code>.\nTruncate <code>value</code> to type <code>Self</code>.\nUsed to undo the zipping by the <code>zipped!</code> macro.\nVarious utilities for low level implementations in generic …\nReturns the inner value.\nZips together matrix of the same size, so that …\nZero extend <code>self</code>.\nZero extend <code>self</code>.\nTrait for types that can be converted to a mutable column …\nTrait for types that can be converted to a column view.\nHeap allocated resizable column vector.\nType that can be interpreted as a batch of column vectors. …\nType that can be interpreted as a mutable batch of column …\nRepresents a type that can be used to slice a column, such …\nMutable view over a column vector, similar to a mutable …\nImmutable view over a column vector, similar to an …\nCorresponding owning type.\nResulting type of the indexing operation.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns <code>self</code> as a matrix view.\nReturns <code>self</code> as a matrix view.\nReturns <code>self</code> as a matrix view.\nReturns <code>self</code> as a mutable matrix view.\nReturns <code>self</code> as a mutable matrix view.\nConvert to a mutable column view.\nConvert to a column view.\nReturns a mutable view over the matrix.\nReturns a mutable view over the vector.\nReturns pointers to the matrix data.\nReturns pointers to the matrix data.\nReturns a pointer to the data of the matrix.\nReturns pointers to the matrix data.\nReturns a mutable pointer to the data of the matrix.\nReturns a view over the matrix.\nReturns a view over the matrix.\nReturns a view over the vector.\nReturns a reference to a slice over the column.\nReturns a mutable reference to a slice over the column.\nReturns a mutable reference to a potentially uninitialized …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nCopies the values from <code>other</code> into <code>self</code>.\nCopies the values from <code>other</code> into <code>self</code>.\nFills the elements of <code>self</code> with copies of <code>constant</code>.\nFills the elements of <code>self</code> with copies of <code>constant</code>.\nFills the elements of <code>self</code> with zeros.\nFills the elements of <code>self</code> with zeros.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new matrix with number of rows <code>nrows</code>, filled …\nReturns a view over a column with 1 row containing value …\nReturns a view over a column with 1 row containing value …\nCreates a <code>ColRef</code> from pointers to the column vector data, …\nCreates a <code>ColMut</code> from pointers to the column vector data, …\nReturns a view over a column with 1 row containing value …\nReturns a view over a column with 1 row containing value …\nReturns a view over a column with <code>nrows</code> rows containing …\nReturns a view over a column with <code>nrows</code> rows containing …\nCreates a <code>ColRef</code> from slice views over the column vector …\nCreates a <code>ColRef</code> from slice views over the column vector …\nCreates a <code>ColMut</code> from slice views over the column vector …\nCreates a <code>ColMut</code> from slice views over the column vector …\nReturns a new matrix with number of rows <code>nrows</code>, filled …\nIndex the column at <code>row</code>.\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns mutable references to the element at the given …\nReturns references to the element at the given index, or …\nReturns mutable references to the element at the given …\nIndex the column at <code>row</code>, without bound checks.\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns an iterator over the elements of the column.\nReturns an iterator over the elements of the column.\nReturns an iterator over the elements of the column.\nReturns an iterator over the elements of the column.\nReturns an iterator over the elements of the column.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nReturns the number of columns of the column. This is …\nReturns the number of columns of the column. This is …\nReturns the number of columns of the column. This is …\nReturns an empty column of dimension <code>0</code>.\nConstructor of the owned type that copies the values.\nConstructor of the owned type that initializes the values …\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the number of rows of the column.\nReturns the number of rows of the column.\nReturns the number of rows of the column.\nReturns a new matrix with number of rows <code>nrows</code>, filled …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReads the value of the element at the given index, with …\nReads the value of the element at the given index, with …\nReads the value of the element at the given index, with …\nReads the value of the element at the given index.\nReads the value of the element at the given index.\nReads the value of the element at the given index.\nReserves the minimum capacity for <code>row_capacity</code> rows …\nResize an owned column or matrix.\nResizes the vector in-place so that the new number of rows …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns the row capacity, that is, the number of rows that …\nReturns the row stride of the matrix, specified in number …\nReturns the row stride of the matrix, specified in number …\nReturns the offset between the first elements of two …\nSet the dimensions of the matrix.\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns a view over the subvector starting at row <code>row_start</code>…\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns an owning <code>Col</code> of the data.\nReturns an owning <code>Col</code> of the data.\nReturns an owning <code>Col</code> of the data\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nTruncates the matrix so that its new number of rows is …\nReturns the column as a contiguous slice if its row stride …\nReturns the column as a contiguous slice if its row stride …\nReturns the column as a contiguous slice if its row stride …\nReturns the column as a contiguous slice if its row stride …\nReturns the column as a contiguous slice if its row stride …\nReturns the column as a contiguous potentially …\nReturns the column as a contiguous potentially …\nReturns a new column vector with 0 rows, with enough …\nWrites the value to the element at the given index, with …\nWrites the value to the element at the given index, with …\nWrites the value to the element at the given index.\nWrites the value to the element at the given index.\nReturns a new matrix with number of rows <code>nrows</code>, filled …\n32-bit complex floating point type. See the module-level …\n32-bit implicitly conjugated complex floating point type.\n64-bit complex floating point type. See the module-level …\n64-bit implicitly conjugated complex floating point type.\nCreate a complex number from a phase.\nCreate a complex number from a phase.\nCalculate the complex conjugate of self.\nCalculate the complex conjugate of self.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a complex number from polar coordinates.\nCreate a complex number from polar coordinates.\nConstruct the imaginary number.\nConstruct the imaginary number.\nReturns the imaginary part of the complex number.\nReturns the imaginary part of the complex number.\nNegated imaginary part.\nNegated imaginary part.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the inverse of <code>self</code>.\nComputes the inverse of <code>self</code>.\nComputes the <code>l1</code> norm of <code>self</code>.\nComputes the <code>l1</code> norm of <code>self</code>.\nNegated imaginary part.\nNegated imaginary part.\nCreate a new complex number.\nCreate a new complex number.\nComputes the <code>l2</code> norm of <code>self</code>.\nComputes the <code>l2</code> norm of <code>self</code>.\nComputes the squared <code>l2</code> norm of <code>self</code>.\nComputes the squared <code>l2</code> norm of <code>self</code>.\nReturns the real part of the complex number.\nReturns the real part of the complex number.\nReal part.\nReal part.\nReal part.\nReal part.\nConvert the number to a num_complex::Complex32.\nConvert the number to a num_complex::Complex64.\nDiagonal matrix.\nDiagonal mutable matrix view.\nDiagonal matrix view.\nReturns a mutable view over the matrix.\nReturns a mutable view over <code>self</code>.\nReturns a view over the matrix.\nReturns a view over the matrix.\nReturns a view over <code>self</code>.\nReturns the diagonal as a column vector view.\nReturns the diagonal as a column vector view.\nReturns the diagonal as a column vector view.\nReturns the diagonal as a mutable column vector view.\nReturns the diagonal as a mutable column vector view.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the diagonal as a column vector.\n32-bit complex floating point.\n64-bit complex floating point.\nData type of the buffer data.\n32-bit floating point.\n64-bit floating point.\nTrait implemented for native types that can be read from a …\nMemory view over a buffer in <code>npy</code> format.\nData type of an <code>npy</code> buffer.\nUnknown type.\nIf the memory buffer is aligned, and the provided type …\nReturns the data type of the memory buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the memory buffer is aligned, in which case the …\nParse a npy file from a memory buffer.\nIf the provided type matches the one stored in the buffer, …\nChunked matrix iterator over the columns.\nChunked matrix iterator over the columns.\nChunked column iterator over the elements.\nChunked column iterator over the elements.\nFixed-size chunked column iterator over the elements.\nFixed-size chunked column iterator over the elements.\nIterator over the columns of a matrix.\nIterator over the columns of a matrix.\nFixed-size chunked matrix iterator over the columns.\nFixed-size chunked matrix iterator over the columns.\nIterator over the elements of a row or column.\nIterator over the elements of a row or column.\nChunked matrix iterator over the rows.\nChunked matrix iterator over the rows.\nChunked row iterator over the elements.\nChunked row iterator over the elements.\nFixed-size chunked row iterator over the elements.\nFixed-size chunked row iterator over the elements.\nIterator over the rows of a matrix.\nIterator over the rows of a matrix.\nFixed-size chunked matrix iterator over the rows.\nFixed-size chunked matrix iterator over the rows.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLow level implementation of the various Cholesky-like …\nLow level implementation of the eigenvalue decomposition …\nBlock Householder transformations.\nKronecker product of two matrices.\nLow level implementation of the LU decompositions.\nMatrix multiplication.\nThis crate provides utilities for computing and …\nHigh level linear system solvers.\nLow level implementation of the SVD of a matrix.\nCreates a temporary matrix of constant values, from the …\nReturns the stack requirements for creating a temporary …\nCreates a temporary matrix of untouched values, from the …\nCreates a temporary matrix of zero values, from the given …\nTriangular matrix inversion.\nTriangular solve module.\nImplementation of <code>zipped!</code> structures.\nThe Bunch Kaufman decomposition of a Hermitian matrix $A$ …\nComputes a permutation that reduces the chance of …\nThe Cholesky decomposition with diagonal $D$ of a …\nThe Cholesky decomposition of a Hermitian positive …\nComputing the decomposition.\nSolving a linear system using the decomposition.\nInfo about the result of the Bunch-Kaufman factorization.\nTuning parameters for the decomposition.\nDynamic Bunch-Kaufman regularization. Values below <code>epsilon</code> …\nDiagonal pivoting.\nPivoting strategy for choosing the pivots.\nBlock size of the algorithm.\nComputes the Cholesky factorization with Bunch-Kaufman  …\nComputes the size and alignment of required workspace for …\nNumber of pivots whose value or sign had to be corrected.\nRegularized value.\nRegularization threshold.\nExpected signs for the diagonal at each step of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPivoting strategy.\nNumber of pivoting transpositions.\nComputes the size and alignment of required workspace for …\nGiven the Bunch-Kaufman factors of a matrix $A$ and a …\nComputing the decomposition.\nSolving a linear system using the decomposition.\nUpdating the decomposition.\nLDLT factorization tuning parameters.\nInfo about the result of the LDLT factorization.\nDynamic LDLT regularization. Values below <code>epsilon</code> in …\nNumber of pivots whose value or sign had to be corrected.\nRegularized value.\nRegularization threshold.\nExpected signs for the diagonal at each step of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the Cholesky factors $L$ and $D$ of the input …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the Cholesky factors of a matrix $A$ and a matrix …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the Cholesky factors of a matrix $A$ and a matrix …\nComputes the size and alignment of required workspace for …\nGiven the Cholesky factors of a matrix $A$ and a matrix …\nGiven the Cholesky factors of a matrix $A$ and a matrix …\nDeletes <code>r</code> rows and columns at the provided indices from …\nComputes the size and alignment of required workspace for …\nInserts <code>r</code> rows and columns at the provided index in the …\nComputes the size and alignment of the required workspace …\nPerforms a rank-r update in place, while clobbering the …\nThis error signifies that the LLT decomposition could not …\nComputing the decomposition.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReconstructing the inverse of the original matrix from the …\nThe dimension of the first square non positive-definite …\nReconstructing the original matrix from the decomposition.\nSolving a linear system using the decomposition.\nUpdating the decomposition.\nInfo about the result of the LLT factorization.\nLLT factorization tuning parameters.\nDynamic LLT regularization. Values below <code>epsilon</code> in …\nComputes the Cholesky factor $L$ of a Hermitian positive …\nComputes the size and alignment of required workspace for …\nNumber of pivots whose value or sign had to be corrected.\nRegularized value.\nRegularization threshold.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the lower triangular part of the inverse of a …\nComputes the lower triangular part of the inverse of a …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the lower triangular part of the reconstructed …\nComputes the lower triangular part of the reconstructed …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the Cholesky factor of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the Cholesky factor of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nGiven the Cholesky factor of a matrix $A$ and a matrix $B$ …\nGiven the Cholesky factor of a matrix $A$ and a matrix $B$ …\nDeletes <code>r</code> rows and columns at the provided indices from …\nComputes the size and alignment of required workspace for …\nInserts <code>r</code> rows and columns at the provided index in the …\nComputes the size and alignment of the required workspace …\nPerforms a rank-r update in place, while clobbering the …\nIndicates whether the eigenvectors are fully computed, …\nHermitian eigendecomposition tuning parameters.\nDo not compute the eigenvectors.\nDo compute the eigenvectors.\nThreshold to switch between blocked and unblocked code\nComputes the eigenvalue decomposition of a square complex …\nSee <code>compute_evd_complex</code>.\nComputes the eigenvalue decomposition of a square real …\nSee <code>compute_evd_real</code>.\nComputes the size and alignment of required workspace for …\nComputes the eigenvalue decomposition of a square …\nSee <code>compute_hermitian_evd</code>.\nComputes the size and alignment of required workspace for …\nComputes the pseudo inverse of a decomposed square …\nSee <code>compute_hermitian_pseudoinverse</code>.\nComputes the size and alignment of required workspace for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThreshold of percent of aggressive-early-deflation window …\nFunction that returns the deflation window to use for a …\nFunction that returns the number of shifts to use for a …\nComputes the size and alignment of required workspace for …\nComputes the product of the given block Householder …\nComputes the size and alignment of required workspace for …\nComputes the product of the matrix, multiplied by the …\nComputes the size and alignment of required workspace for …\nComputes the product of a sequence of block Householder …\nComputes the size and alignment of required workspace for …\nComputes the product of <code>matrix</code>, multiplied by a sequence …\nComputes the size and alignment of required workspace for …\nComputes the product of the transpose of a sequence block …\nComputes the size and alignment of required workspace for …\nComputes the product of <code>matrix</code>, multiplied by the …\nComputes the size and alignment of required workspace for …\nComputes the product of the transpose of the given block …\nComputes the size and alignment of required workspace for …\nComputes the product of the matrix, multiplied by the …\nComputes the Householder reflection $I - \\frac{v …\nThe full pivoting LU decomposition is such that: …\nThe partial pivoting LU decomposition is such that: $$PA = …\nComputing the decomposition.\nReconstructing the inverse of the original matrix from the …\nReconstructing the inverse of the original matrix from the …\nSolving a linear system using the decomposition.\nLU factorization tuning parameters.\nInformation about the resulting LU factorization.\nAt which size the parallelism should be disabled. <code>None</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the LU decomposition of the given matrix with …\nComputes the size and alignment of required workspace for …\nNumber of transpositions that were performed, can be used …\nComputes the inverse of a matrix, given its full pivoting …\nComputes the inverse of a matrix, given its full pivoting …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the reconstructed matrix, given its full pivoting …\nComputes the reconstructed matrix, given its full pivoting …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputing the decomposition.\nReconstructing the inverse of the original matrix from the …\nReconstructing the original matrix from the decomposition.\nSolving a linear system using the decomposition.\nLUfactorization tuning parameters.\nInformation about the resulting LU factorization.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the LU decomposition of the given matrix with …\nComputes the size and alignment of required workspace for …\nNumber of transpositions that were performed, can be used …\nComputes the inverse of a matrix, given its partial …\nComputes the inverse of a matrix, given its partial …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the reconstructed matrix, given its partial …\nComputes the reconstructed matrix, given its partial …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nGiven the LU factors of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the matrix product …\nComputes the matrix product …\nTriangular matrix multiplication module, where some of the …\nDescribes the parts of the matrix that must be accessed.\nThe full matrix is accessed.\nThe lower triangular half (excluding the diagonal) is …\nThe upper triangular half (excluding the diagonal) is …\nThe lower triangular half (including the diagonal) is …\nThe upper triangular half (including the diagonal) is …\nThe lower triangular half (excluding the diagonal, which …\nThe upper triangular half (excluding the diagonal, which …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if <code>self</code> is full.\nChecks if <code>self</code> is triangular lower (either inclusive or …\nChecks if <code>self</code> is triangular upper (either inclusive or …\nComputes the matrix product …\nComputes the matrix product …\nReturns the block structure corresponding to the …\nThe QR decomposition decomposes a matrix $A$ into the …\nThe QR decomposition decomposes a matrix $A$ into the …\nComputing the decomposition.\nReconstructing the inverse of the original matrix from the …\nReconstructing the original matrix from the decomposition.\nSolving a linear system using the decomposition.\nQR factorization tuning parameters.\nInformation about the resulting QR factorization.\nAt which size the parallelism should be disabled. <code>None</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the QR decomposition with pivoting of a …\nComputes the size and alignment of required workspace for …\nNumber of transpositions that were performed, can be used …\nComputes the inverse of a matrix, given its QR …\nComputes the inverse of a matrix, given its QR …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the reconstructed matrix, given its QR …\nComputes the reconstructed matrix, given its QR …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the QR factors with column pivoting of a matrix $A$ …\nGiven the QR factors with column pivoting of a matrix $A$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the QR factors with column pivoting of a matrix $A$ …\nGiven the QR factors with column pivoting of a matrix $A$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputing the decomposition.\nReconstructing the inverse of the original matrix from the …\nReconstructing the original matrix from the decomposition.\nSolving a linear system using the decomposition.\nQR factorization tuning parameters.\nAt which size blocking algorithms should be disabled. <code>None</code> …\nAt which size the parallelism should be disabled. <code>None</code> to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the QR decomposition of a rectangular matrix $A$, …\nComputes the size and alignment of required workspace for …\nThe recommended block size to use for a QR decomposition …\nComputes the inverse of a matrix, given its QR …\nComputes the inverse of a matrix, given its QR …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nComputes the reconstructed matrix, given its QR …\nComputes the reconstructed matrix, given its QR …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the QR factors of a matrix $A$ and a matrix $B$ …\nGiven the QR factors of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nGiven the QR factors of a matrix $A$ and a matrix $B$ …\nGiven the QR factors of a matrix $A$ and a matrix $B$ …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nCholesky decomposition.\nQR decomposition with column pivoting.\nComplex eigendecomposition.\nLU decomposition with full pivoting.\nBunch-Kaufman decomposition.\nLU decomposition with partial pivoting.\nQR decomposition.\nSelf-adjoint eigendecomposition.\nSolver that can compute solution of a linear system.\nObject-safe base for <code>Solver</code>\nDense solver that can compute the least squares solution …\nObject-safe base for <code>SolverLstsq</code>\nSingular value decomposition.\nThin singular value decomposition.\nReturns the column permutation due to pivoting.\nReturns the column permutation matrix $P$ of the QR …\nReturns the factor $L$ of the Cholesky decomposition.\nReturns the factor $L$ of the LU decomposition.\nReturns the factor $L$ of the LU decomposition.\nReturns the factor $Q$ of the QR decomposition.\nReturns the factor $Q$ of the QR decomposition.\nReturns the factor $R$ of the QR decomposition.\nReturns the factor $R$ of the QR decomposition.\nReturns the leftmost $r$ columns of the factor $Q$ of the …\nReturns the leftmost $r$ columns of the factor $R$ of the …\nReturns the top $r$ rows of the factor $R$ of the QR …\nReturns the top $r$ rows of the factor $R$ of the QR …\nReturns the factor $U$ of the LU decomposition.\nReturns the factor $U$ of the LU decomposition.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the inverse of the original matrix using the …\nReturns the Bunch-Kaufman factorization of the input …\nReturns the LU decomposition of the input matrix with …\nReturns the LU decomposition of the input matrix with row …\nReturns the QR decomposition of the input matrix without …\nReturns the QR decomposition of the input matrix with …\nReturns the SVD of the input matrix.\nReturns the thin SVD of the input matrix.\nReturns the eigenvalue decomposition of the Hermitian …\nReturns the eigendecomposition of the complex-valued input …\nReturns the eigendecomposition of the real-valued input …\nComputes the pseudo inverse.\nComputes the pseudo inverse.\nReconstructs the original matrix using the decomposition.\nReturns the row permutation due to pivoting.\nReturns the row permutation due to pivoting.\nReturns the factor $S$ of the eigenvalue decomposition.\nReturns the factor $S$ of the eigenvalue decomposition.\nReturns the diagonal of the factor $S$ of the SVD as a …\nReturns the diagonal of the factor $S$ of the SVD as a …\nReturns the number of transpositions that constitute the …\nReturns the number of transpositions that constitute the …\nReturns the Cholesky factorization of the input matrix, or …\nReturns the factor $U$ of the SVD.\nReturns the factor $U$ of the SVD.\nReturns the factor $U$ of the eigenvalue decomposition.\nReturns the factor $U$ of the eigenvalue decomposition.\nReturns the factor $V$ of the SVD.\nReturns the factor $V$ of the SVD.\nIndicates whether the singular vectors are fully computed, …\nCompute all the singular vectors.\nDo not compute the singular vectors.\nSVD tuning parameters.\nOnly compute the first $\\min(\\text{nrows}(A), …\nComputes the singular value decomposition of <code>matrix</code>.\nSee <code>compute_svd</code>.\nComputes the size and alignment of required workspace for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the inverse of the lower triangular matrix <code>src</code> …\nComputes the inverse of the lower triangular matrix <code>src</code> …\nComputes the inverse of the upper triangular matrix <code>src</code> …\nComputes the inverse of the upper triangular matrix <code>src</code> …\nComputes the solution of <code>triangular_lower×X = rhs</code>, and …\nComputes the solution of <code>Op_lhs(triangular_lower)×X = rhs</code>…\nComputes the solution of <code>triangular_lower×X = rhs</code>, and …\nComputes the solution of <code>Op_lhs(triangular_lower)×X = rhs</code>…\nComputes the solution of <code>triangular_upper×X = rhs</code>, and …\nComputes the solution of <code>Op_lhs(triangular_upper)×X = rhs</code>…\nComputes the solution of <code>triangular_upper×X = rhs</code>, and …\nComputes the solution of <code>Op_lhs(triangular_upper)×X = rhs</code>…\nType of columns.\nSpecifies whether the main diagonal should be traversed, …\nInclude diagonal of matrix\nIndexing type.\nItem produced by the zipped views.\nSingle element.\nSingle matrix view.\nLayout transformation type.\nZipped matrix views.\nMatrix layout transformation. Used for zipping …\nType with a given matrix shape.\nZipped matrix views.\nMatrix is used as-is.\nVector is used as-is.\nRead only view over a single matrix element.\nRead-write view over a single matrix element.\nVector is reversed.\nMatrix rows are reversed.\nType of rows.\nDo not include diagonal of matrix\nContiguous slice type.\nView type.\nMatrix is transposed.\nMatrix is transposed, then rows are reversed.\nVector layout transformation. Used for zipping …\nType that can be converted to a view.\nZipped elements.\nZipped matrix views.\nApplies <code>f</code> to each element of <code>self</code>.\nApplies <code>f</code> to each element of <code>self</code>.\nApplies <code>f</code> to each element of <code>self</code>.\nApplies <code>f</code> to each element of <code>self</code>.\nApplies <code>f</code> to each element of <code>self</code>.\nApplies <code>f</code> to each element of <code>self</code>.\nApplies <code>f</code> to each element of the lower triangular half of …\nApplies <code>f</code> to each element of the lower triangular half of …\nApplies <code>f</code> to each element of the lower triangular half of …\nApplies <code>f</code> to each element of the lower triangular half of …\nApplies <code>f</code> to each element of the upper triangular half of …\nApplies <code>f</code> to each element of the upper triangular half of …\nApplies <code>f</code> to each element of the upper triangular half of …\nApplies <code>f</code> to each element of the upper triangular half of …\nApplies <code>f</code> to each element of <code>self</code>, while passing the …\nApplies <code>f</code> to each element of <code>self</code>, while passing in the …\nApplies <code>f</code> to each element of <code>self</code>, while passing in the …\nApplies <code>f</code> to each element of <code>self</code>, while passing in the …\nApplies <code>f</code> to each element of <code>self</code>, while passing the …\nApplies <code>f</code> to each element of <code>self</code>, while passing in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the item at the given slice position, skipping bound …\nReturns slice at index of length <code>n_elems</code>.\nGet the item at the given index, skipping bound checks.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the zipped matrices are contiguous.\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nApplies <code>f</code> to each element of <code>self</code> and collect its result …\nReturns the number of columns.\nCreates a zipped matrix, after asserting that the …\nCreates a zipped matrix, assuming that the dimensions …\nReturns the number of rows.\nComputes the preferred iteration layout of the matrices.\nRead the value of the element.\nRead the value of the element.\nReturns the view over self.\nApplies the layout transformation to the matrices.\nWrite to the location of the element.\nTrait for types that can be converted to a 2D matrix view.\nTrait for types that can be converted to a mutable 2D …\nTrait for types that can be converted to a mutable matrix …\nTrait for types that can be converted to a matrix view.\nHeap allocated resizable matrix, similar to a 2D <code>Vec</code>.\nRepresents a type that can be used to slice a matrix, such …\nMutable view over a matrix, similar to a mutable reference …\nImmutable view over a matrix, similar to an immutable …\nResulting type of the indexing operation.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nConvert to a mutable 2D matrix view.\nConvert to a 2D matrix view.\nConvert to a mutable matrix view.\nConvert to a matrix view.\nReturns a mutable view over the matrix.\nReturns a mutable view over the matrix.\nReturns pointers to the matrix data.\nReturns pointers to the matrix data.\nReturns a pointer to the data of the matrix.\nReturns pointers to the matrix data.\nReturns a mutable pointer to the data of the matrix.\nReturns a view over the matrix.\nReturns a view over the matrix.\nReturns a view over the matrix.\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nReturns a reference to a slice over the column at the …\nReturns a mutable reference to a slice over the column at …\nReturns the column capacity, that is, the number of …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator over the columns of the matrix.\nReturns an iterator over the columns of the matrix.\nReturns an iterator over the columns of the matrix.\nReturns an iterator over the columns of the matrix.\nReturns an iterator over the columns of the matrix.\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns the QR decomposition of <code>self</code> with column pivoting.\nReturns the QR decomposition of <code>self</code> with column pivoting.\nReturns the QR decomposition of <code>self</code> with column pivoting.\nReturns the column stride of the matrix, specified in …\nReturns the column stride of the matrix, specified in …\nReturns the offset between the first elements of two …\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nReturns a view over the column at the given index.\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nGiven a matrix with a single column, returns an object …\nReturns the eigendecomposition of <code>self</code>, when <code>E</code> is in the …\nReturns the eigendecomposition of <code>self</code>, when <code>E</code> is in the …\nReturns the eigendecomposition of <code>self</code>, when <code>E</code> is in the …\nReturns the eigenvalues of <code>self</code>, when <code>E</code> is in the complex …\nReturns the eigenvalues of <code>self</code>, when <code>E</code> is in the complex …\nReturns the eigenvalues of <code>self</code>, when <code>E</code> is in the complex …\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nCopies the values from <code>other</code> into <code>self</code>.\nCopies the values from <code>other</code> into <code>self</code>.\nCopies the values from the lower triangular part of <code>other</code> …\nCopies the values from the lower triangular part of <code>other</code> …\nCopies the values from the upper triangular part of <code>other</code> …\nCopies the values from the upper triangular part of <code>other</code> …\nCopies the values from the lower triangular part of <code>other</code> …\nCopies the values from the lower triangular part of <code>other</code> …\nCopies the values from the upper triangular part of <code>other</code> …\nCopies the values from the upper triangular part of <code>other</code> …\nReturns the determinant of <code>self</code>.\nReturns the determinant of <code>self</code>.\nReturns the determinant of <code>self</code>.\nReturns the diagonal of the matrix.\nReturns the diagonal of the matrix.\nReturns a view over the diagonal of the matrix.\nReturns the diagonal of the matrix.\nReturns a view over the diagonal of the matrix.\nReturns the eigendecomposition of <code>self</code>, as a complex …\nReturns the eigendecomposition of <code>self</code>, as a complex …\nReturns the eigendecomposition of <code>self</code>, as a complex …\nReturns the eigenvalues of <code>self</code>, as complex values. The …\nReturns the eigenvalues of <code>self</code>, as complex values. The …\nReturns the eigenvalues of <code>self</code>, as complex values. The …\nFills the elements of <code>self</code> with copies of <code>constant</code>.\nFills the elements of <code>self</code> with copies of <code>constant</code>.\nFills the elements of <code>self</code> with zeros.\nFills the elements of <code>self</code> with zeros.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nReturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\nReturns a view over a <code>1×1</code> matrix containing value as its …\nReturns a view over a <code>1×1</code> matrix containing value as its …\nCreates a <code>MatRef</code> from pointers to the matrix data, …\nCreates a <code>MatMut</code> from pointers to the matrix data, …\nReturns a view over a <code>1×1</code> matrix containing value as its …\nReturns a view over a <code>1×1</code> matrix containing value as its …\nReturns a view over a matrix containing <code>col</code> repeated <code>ncols</code> …\nReturns a view over an <code>nrows×ncols</code> matrix containing <code>value</code>…\nReturns a view over an <code>nrows×ncols</code> matrix containing <code>value</code>…\nReturns a view over a matrix containing <code>row</code> repeated <code>nrows</code> …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatRef</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nCreates a <code>MatMut</code> from slice views over the matrix data, …\nReturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\nReturns the LU decomposition of <code>self</code> with full pivoting.\nReturns the LU decomposition of <code>self</code> with full pivoting.\nReturns the LU decomposition of <code>self</code> with full pivoting.\nIndex the matrix at <code>(row, col)</code>.\nReturns references to the element at the given indices, or …\nReturns references to the element at the given indices, or …\nReturns references to the element at the given indices, or …\nReturns mutable references to the element at the given …\nReturns mutable references to the element at the given …\nReturns mutable references to the element at the given …\nReturns mutable references to the element at the given …\nIndex the matrix at <code>(row, col)</code>, without bound checks.\nReturns references to the element at the given indices, or …\nReturns references to the element at the given indices, or …\nReturns references to the element at the given indices, or …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nReturns the Bunch-Kaufman decomposition of <code>self</code>. Only the …\nReturns the Bunch-Kaufman decomposition of <code>self</code>. Only the …\nReturns the Bunch-Kaufman decomposition of <code>self</code>. Only the …\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns an empty matrix of dimension <code>0×0</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides successive …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns a parallel iterator that provides exactly <code>count</code> …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns raw pointers to the element at the given indices.\nReturns raw pointers to the element at the given indices.\nReturns raw pointers to the element at the given indices.\nReturns raw pointers to the element at the given indices.\nReturns raw pointers to the element at the given indices.\nReturns raw pointers to the element at the given indices, …\nReturns raw pointers to the element at the given indices, …\nReturns raw pointers to the element at the given indices, …\nReturns raw pointers to the element at the given indices, …\nReturns raw pointers to the element at the given indices, …\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nReads the value of the element at the given indices, with …\nReads the value of the element at the given indices, with …\nReads the value of the element at the given indices, with …\nReads the value of the element at the given indices.\nReads the value of the element at the given indices.\nReads the value of the element at the given indices.\nReturns the real and imaginary components of <code>self</code>.\nReturns the real and imaginary components of <code>self</code>.\nReturns the real and imaginary components of <code>self</code>.\nReturns the real and imaginary components of <code>self</code>.\nReturns the real and imaginary components of <code>self</code>.\nReserves the minimum capacity for <code>row_capacity</code> rows and …\nResizes the matrix in-place so that the new dimensions are …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows and the …\nReturns a view over the <code>self</code>, with the rows and the …\nReturns a view over the <code>self</code>, with the rows and the …\nReturns a view over the <code>self</code>, with the rows and the …\nReturns a view over the <code>self</code>, with the rows and the …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the <code>self</code>, with the rows in reversed …\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturns the row capacity, that is, the number of rows that …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator over the rows of the matrix.\nReturns an iterator over the rows of the matrix.\nReturns an iterator over the rows of the matrix.\nReturns an iterator over the rows of the matrix.\nReturns an iterator over the rows of the matrix.\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns the row stride of the matrix, specified in number …\nReturns the row stride of the matrix, specified in number …\nReturns the offset between the first elements of two …\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturns a view over the row at the given index.\nReturns the eigendecomposition of <code>self</code>, assuming it is …\nReturns the eigendecomposition of <code>self</code>, assuming it is …\nReturns the eigendecomposition of <code>self</code>, assuming it is …\nReturns the eigenvalues of <code>self</code>, assuming it is …\nReturns the eigenvalues of <code>self</code>, assuming it is …\nReturns the eigenvalues of <code>self</code>, assuming it is …\nSet the dimensions of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the singular values of <code>self</code>, in nonincreasing …\nReturns the singular values of <code>self</code>, in nonincreasing …\nReturns the singular values of <code>self</code>, in nonincreasing …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix vertically at the given row into two …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally at the given row into two …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nSplits the matrix horizontally and vertically at the given …\nReturns a reference to the first column and a view over …\nReturns a reference to the first column and a view over …\nReturns a reference to the first column and a view over …\nReturns a reference to the first column and a view over …\nReturns a reference to the first column and a view over …\nReturns a reference to the first row and a view over the …\nReturns a reference to the first row and a view over the …\nReturns a reference to the first row and a view over the …\nReturns a reference to the first row and a view over the …\nReturns a reference to the first row and a view over the …\nReturns a reference to the last column and a view over the …\nReturns a reference to the last column and a view over the …\nReturns a reference to the last column and a view over the …\nReturns a reference to the last column and a view over the …\nReturns a reference to the last column and a view over the …\nReturns a reference to the last row and a view over the …\nReturns a reference to the last row and a view over the …\nReturns a reference to the last row and a view over the …\nReturns a reference to the last row and a view over the …\nReturns a reference to the last row and a view over the …\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at column …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at indices …\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns a view over the submatrix starting at row <code>row_start</code>…\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns the SVD of <code>self</code>.\nReturns the SVD of <code>self</code>.\nReturns the SVD of <code>self</code>.\nReturns the thin SVD of <code>self</code>.\nReturns the thin SVD of <code>self</code>.\nReturns the thin SVD of <code>self</code>.\nReturns an owning <code>Mat</code> of the data.\nReturns an owning <code>Mat</code> of the data\nReturns an owning <code>Mat</code> of the data\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nTruncates the matrix so that its new dimensions are …\nReturns views over the columns at the given indices.\nReturns views over the columns at the given indices.\nReturns views over the rows at the given indices.\nReturns views over the rows at the given indices.\nReturns a new matrix with dimensions <code>(0, 0)</code>, with enough …\nWrites the value to the element at the given indices, with …\nWrites the value to the element at the given indices, with …\nWrites the value to the element at the given indices.\nWrites the value to the element at the given indices.\nReturns a new matrix with dimensions <code>(nrows, ncols)</code>, …\nEmulation layer for <code>faer_core</code>\nMust have the same layout as <code>Self</code>, and <code>Canonical::Unit</code> …\nUnstable trait containing the operations that a number …\nMust have the same layout as <code>Self</code>, and <code>Conj::Unit</code> must …\nTrait for types that may be implicitly conjugated.\nUnstable core trait for describing how a scalar value may …\nUnstable trait containing the operations that a real …\nPerforms the implicit conjugation operation on the given …\nCreates a <code>col::Col</code> containing the arguments.\nReturns the absolute value of <code>self</code>.\nReturns the squared absolute value of <code>self</code>.\nReturns <code>self + rhs</code>.\nReturns <code>conjugate(self)</code>.\nConverts <code>value</code> from <code>f64</code> to <code>Self</code>. The conversion may be …\nReturns a complex number whose real part is equal to <code>real</code>, …\nReturns the imaginary part.\nReturns <code>1.0/self</code>.\nReturns true if <code>self</code> is a NaN value, or false otherwise.\nReturns true if <code>self</code> is a NaN value, or false otherwise.\nReturns <code>self * rhs</code>.\nReturns a NaN value.\nReturns <code>-self</code>.\nReturns <code>1.0</code>.\nReturns the real part.\nReturns the input, scaled by <code>rhs</code>.\nReturns the input, scaled by <code>rhs</code>.\nReturns either the norm or squared norm of the number.\nReturns the square root of <code>self</code>.\nReturns <code>self - rhs</code>.\nReturns <code>0.0</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a <code>Mat</code> containing the arguments.\nCreates a <code>row::Row</code> containing the arguments.\nUsed to undo the zipping by the <code>zipped!</code> macro.\nZips together matrix of the same size, so that …\nPermutation matrix.\nImmutable permutation matrix view.\nReturns the permutation as an array.\nConvert <code>self</code> to a permutation view.\nConvert <code>self</code> to a permutation view.\nCast the permutation to the fixed width index type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the permutation as an array.\nReturns the inverse permutation.\nReturns the inverse permutation.\nReturns the dimension of the permutation.\nReturns the dimension of the permutation.\nCreates a new permutation, by checking the validity of the …\nCreates a new permutation, by checking the validity of the …\nCreates a new permutation reference, without checking the …\nCreates a new permutation reference, without checking the …\nComputes a permutation of the columns of the source matrix …\nComputes a permutation of the columns of the matrix using …\nComputes the size and alignment of required workspace for …\nComputes a permutation of the rows of the source matrix …\nComputes a permutation of the rows of the matrix using the …\nComputes the size and alignment of required workspace for …\nSwaps the values in the columns <code>a</code> and <code>b</code>.\nSwaps the two columns at indices <code>a</code> and <code>b</code> in the given …\nSwaps the values in the rows <code>a</code> and <code>b</code>.\nSwaps the two rows at indices <code>a</code> and <code>b</code> in the given matrix.\nCast the permutation from the fixed width index type.\nCreates a <code>col::Col</code> containing the arguments.\nCreates a <code>Mat</code> containing the arguments.\nCreates a <code>row::Row</code> containing the arguments.\nUsed to undo the zipping by the <code>zipped!</code> macro.\nZips together matrix of the same size, so that …\nTrait for types that can be converted to a mutable row …\nTrait for types that can be converted to a row view.\nCorresponding owning type.\nHeap allocated resizable row vector.\nType that can be interpreted as a batch of row vectors. …\nType that can be interpreted as a mutable batch of row …\nRepresents a type that can be used to slice a row, such as …\nMutable view over a row vector, similar to a mutable …\nImmutable view over a row vector, similar to an immutable …\nResulting type of the indexing operation.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns <code>self</code> as a matrix view.\nReturns <code>self</code> as a matrix view.\nReturns <code>self</code> as a matrix view.\nReturns <code>self</code> as a mutable matrix view.\nReturns <code>self</code> as a mutable matrix view.\nReturns a mutable view over the matrix.\nReturns a mutable view over the vector.\nReturns pointers to the matrix data.\nReturns pointers to the matrix data.\nReturns a pointer to the data of the matrix.\nReturns pointers to the matrix data.\nReturns a mutable pointer to the data of the matrix.\nReturns a view over the matrix.\nReturns a view over the matrix.\nReturns a view over the vector.\nConvert to a mutable row view.\nConvert to a row view.\nReturns a reference to a slice over the row.\nReturns a mutable reference to a slice over the row.\nReturns a mutable reference to a potentially uninitialized …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns the col capacity, that is, the number of cols that …\nReturns the column stride of the matrix, specified in …\nReturns the column stride of the matrix, specified in …\nReturns the offset between the first elements of two …\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nCopies the values from <code>other</code> into <code>self</code>.\nCopies the values from <code>other</code> into <code>self</code>.\nFills the elements of <code>self</code> with copies of <code>constant</code>.\nFills the elements of <code>self</code> with copies of <code>constant</code>.\nFills the elements of <code>self</code> with zeros.\nFills the elements of <code>self</code> with zeros.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new matrix with number of columns <code>ncols</code>, filled …\nReturns a view over a column with 1 row containing value …\nReturns a view over a row with 1 column containing value …\nCreates a <code>RowRef</code> from pointers to the row vector data, …\nCreates a <code>RowMut</code> from pointers to the row vector data, …\nReturns a view over a row with 1 column containing value …\nReturns a view over a row with 1 column containing value …\nReturns a view over a row with <code>ncols</code> columns containing …\nReturns a view over a row with <code>ncols</code> columns containing …\nCreates a <code>RowRef</code> from slice views over the row vector …\nCreates a <code>RowRef</code> from slice views over the row vector …\nCreates a <code>RowMut</code> from slice views over the row vector …\nCreates a <code>RowMut</code> from slice views over the row vector …\nReturns a new matrix with number of columns <code>ncols</code>, filled …\nIndex the row at <code>col</code>.\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns mutable references to the element at the given …\nReturns references to the element at the given index, or …\nReturns mutable references to the element at the given …\nIndex the row at <code>col</code>, without bound checks.\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns references to the element at the given index, or …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nReturns <code>true</code> if any of the elements is NaN, otherwise …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns <code>true</code> if all of the elements are finite, otherwise …\nReturns an iterator over the elements of the row.\nReturns an iterator over the elements of the row.\nReturns an iterator over the elements of the row.\nReturns an iterator over the elements of the row.\nReturns an iterator over the elements of the row.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nKronecker product of <code>self</code> and <code>rhs</code>.\nReturns the number of columns of the row.\nReturns the number of columns of the row.\nReturns the number of columns of the row.\nReturns an empty row of dimension <code>0</code>.\nConstructor of the owned type that copies the values.\nConstructor of the owned type that initializes the values …\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L1 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the L2 norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the maximum norm of <code>self</code>.\nReturns the number of rows of the row. This is always …\nReturns the number of rows of the row. This is always …\nReturns the number of rows of the row. This is always …\nReturns a new matrix with number of columns <code>ncols</code>, filled …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides successive chunks of the …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns an iterator that provides exactly <code>count</code> successive …\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index.\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReturns raw pointers to the element at the given index, …\nReads the value of the element at the given index, with …\nReads the value of the element at the given index, with …\nReads the value of the element at the given index, with …\nReads the value of the element at the given index.\nReads the value of the element at the given index.\nReads the value of the element at the given index.\nReserves the minimum capacity for <code>col_capacity</code> columns …\nResize an owned column or matrix.\nResizes the vector in-place so that the new number of …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nReturns a view over the <code>self</code>, with the columns in reversed …\nSet the dimensions of the matrix.\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nSplits the column vector at the given index into two parts …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the first element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns a reference to the last element and a view over …\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns the squared L2 norm of <code>self</code>.\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the subvector starting at col <code>col_start</code>…\nReturns a view over the subvector starting at column …\nReturns a view over the subvector starting at column …\nReturns a view over the subvector starting at column …\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns the sum of <code>self</code>.\nReturns an owning <code>Row</code> of the data.\nReturns an owning <code>Row</code> of the data.\nReturns an owning <code>Row</code> of the data\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nReturns a view over the transpose of <code>self</code>.\nTruncates the matrix so that its new number of columns is …\nReturns the row as a contiguous slice if its column stride …\nReturns the row as a contiguous slice if its column stride …\nReturns the row as a contiguous slice if its column stride …\nReturns the row as a contiguous slice if its column stride …\nReturns the row as a contiguous slice if its column stride …\nReturns the row as a contiguous potentially uninitialized …\nReturns the row as a contiguous potentially uninitialized …\nReturns a new column vector with 0 columns, with enough …\nWrites the value to the element at the given index, with …\nWrites the value to the element at the given index, with …\nWrites the value to the element at the given index.\nWrites the value to the element at the given index.\nReturns a new matrix with number of columns <code>ncols</code>, filled …\nNew filled values should be added to the old values.\nErrors that can occur in sparse algorithms.\nErrors that can occur in sparse algorithms.\nWhether the filled values should replace the current …\nGeneric error (allocation or index overflow).\nAn index exceeding the maximum value (<code>I::Signed::MAX</code> for a …\nMatrix index out-of-bounds error.\nMemory allocation failed.\nNew filled values should replace the old values.\nSparse matrix in column-major format, either compressed or …\nSparse matrix view in column-major format, either …\nSparse matrix view in column-major format, either …\nSparse matrix in column-major format, either compressed or …\nSparse matrix view in column-major format, either …\nSparse matrix view in column-major format, either …\nSymbolic structure of sparse matrix in column format, …\nSymbolic view structure of sparse matrix in column format, …\nSymbolic structure of sparse matrix in row format, either …\nSymbolic view structure of sparse matrix in row format, …\nThe order values should be read in, when …\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a mutable view over <code>self</code>.\nReturns a mutable view over <code>self</code>.\nReturns a mutable view over <code>self</code>.\nReturns a mutable view over <code>self</code>.\nReturns a view over <code>self</code>.\nReturns a view over <code>self</code>.\nReturns a view over <code>self</code>.\nReturns a view over <code>self</code>.\nReturns a view over the symbolic structure of <code>self</code>.\nReturns a view over <code>self</code>.\nReturns a view over the symbolic structure of <code>self</code>.\nReturns a view over <code>self</code>.\nReturns a view over the canonical view of <code>self</code>, along with …\nReturns a view over the canonical view of <code>self</code>, along with …\nReturns a view over the canonical view of <code>self</code>, along with …\nReturns a view over the canonical view of <code>self</code>, along with …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical view of <code>self</code>, along with …\nReturns a view over the canonical view of <code>self</code>, along with …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns a view over the canonical representation of <code>self</code>, …\nReturns the column indices.\nReturns the column indices.\nReturns the column indices.\nReturns the column indices.\nReturns the column indices.\nReturns the column indices of row i.\nReturns the column indices of row i.\nReturns the column indices of row i.\nReturns the column indices of row <code>i</code>.\nReturns the column indices of row i.\nReturns the column indices of row i.\nReturns the column indices of row i.\nReturns the column indices of row i.\nReturns the column indices of row <code>i</code>.\nReturns the column indices of row i.\nReturns the column pointers.\nReturns the column pointers.\nReturns the column pointers.\nReturns the column pointers.\nReturns the column pointers.\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the range that the column <code>j</code> occupies in …\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns the number of symbolic non-zeros in the matrix.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nReturns a view over the conjugate of <code>self</code>.\nFill the matrix from a previously created value order. The …\nFill the matrix from a previously created value order. The …\nFill the matrix from a previously created value order. The …\nFill the matrix from a previously created value order. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a reference to a slice containing the values at …\nReturns a mutable reference to a slice containing the …\nReturns a mutable reference to a slice containing the …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nReturns a reference to the value at the given index, or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns a view over the conjugate transpose of <code>self</code>.\nReturns the conjugate of <code>self</code>.\nReturns the conjugate of <code>self</code>.\nReturns the components of the matrix in the order:\nDecomposes the matrix into the symbolic part and the …\nReturns the components of the matrix in the order:\nDecomposes the matrix into the symbolic part and the …\nConsumes the matrix, and returns its transpose in …\nReturns the transpose of <code>self</code> in row-major format.\nConsumes the matrix, and returns its transpose in …\nReturns the transpose of <code>self</code> in column-major format.\nSparse linear algebra module. Contains low level routines …\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nReturns the number of columns of the matrix.\nCreates a new sparse matrix view.\nCreates a new sparse matrix view.\nCreates a new sparse matrix view.\nCreates a new sparse matrix view.\nCreates a new sparse matrix view.\nCreates a new sparse matrix view.\nCreates a new symbolic matrix view after asserting its …\nCreates a new symbolic matrix view after asserting its …\nCreates a new symbolic matrix view after asserting its …\nCreates a new symbolic matrix view after asserting its …\nCreate a new matrix from a previously created symbolic …\nCreate a new matrix from a previously created symbolic …\nCreates a new symbolic matrix view without asserting its …\nCreates a new symbolic matrix view without asserting its …\nCreates a new symbolic matrix view without asserting its …\nCreates a new symbolic matrix view without asserting its …\nCreates a new symbolic matrix view from data containing …\nCreates a new symbolic matrix view from data containing …\nCreates a new symbolic matrix view from data containing …\nCreates a new symbolic matrix view from data containing …\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the count of non-zeros per row of the matrix.\nReturns the count of non-zeros per column of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nReturns the number of rows of the matrix.\nSparse matrix binary and ternary operation implementations.\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nDecomposes the matrix into the symbolic part and the …\nReturns the row indices.\nReturns the row indices.\nReturns the row indices.\nReturns the row indices.\nReturns the row indices.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the row indices of column <code>j</code>.\nReturns the column pointers.\nReturns the column pointers.\nReturns the column pointers.\nReturns the column pointers.\nReturns the column pointers.\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the range that the row <code>i</code> occupies in …\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nReturns the number of rows and columns of the matrix.\nSparse solvers.\nSorts the row indices in each column of the matrix …\nSorts the row indices in each column of the matrix …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the Cholesky decomposition of <code>self</code>. Only the …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the LU decomposition of <code>self</code> with partial (row) …\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nReturns the QR decomposition of <code>self</code>.\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is a lower triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit lower triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is a unit upper triangular matrix, solves …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nAssuming <code>self</code> is an upper triangular matrix, solves the …\nReturns the symbolic structure of the matrix.\nReturns the symbolic structure of the matrix.\nReturns the symbolic structure of the matrix.\nReturns the symbolic structure of the matrix.\nReturns the symbolic structure of the matrix.\nReturns the symbolic structure of the matrix.\nCopies the current matrix into a newly allocated matrix, …\nCopies <code>self</code> into a newly allocated matrix, with …\nCopies <code>self</code> into a newly allocated matrix, with …\nCopies the current matrix into a newly allocated matrix, …\nCopies <code>self</code> into a newly allocated matrix, with …\nCopies <code>self</code> into a newly allocated dense matrix\nCopies <code>self</code> into a newly allocated dense matrix\nCopies <code>self</code> into a newly allocated dense matrix\nCopies <code>self</code> into a newly allocated dense matrix\nCopies <code>self</code> into a newly allocated dense matrix\nCopies <code>self</code> into a newly allocated dense matrix\nCopies the current matrix into a newly allocated matrix.\nCopies <code>self</code> into a newly allocated matrix.\nCopies <code>self</code> into a newly allocated matrix.\nCopies the current matrix into a newly allocated matrix.\nCopies <code>self</code> into a newly allocated matrix.\nCopies <code>self</code> into a newly allocated matrix.\nCopies the current matrix into a newly allocated matrix.\nCopies <code>self</code> into a newly allocated matrix.\nCopies the current matrix into a newly allocated matrix.\nCopies <code>self</code> into a newly allocated matrix.\nCopies the current matrix into a newly allocated matrix, …\nCopies <code>self</code> into a newly allocated matrix, with row-major …\nCopies <code>self</code> into a newly allocated matrix, with row-major …\nCopies the current matrix into a newly allocated matrix, …\nCopies <code>self</code> into a newly allocated matrix, with row-major …\nCopies <code>self</code> into a newly allocated matrix with sorted …\nCopies <code>self</code> into a newly allocated matrix with sorted …\nCopies <code>self</code> into a newly allocated matrix with sorted …\nCopies <code>self</code> into a newly allocated matrix with sorted …\nCopies <code>self</code> into a newly allocated matrix with sorted …\nCopies <code>self</code> into a newly allocated matrix with sorted …\nReturns a view over the transpose of <code>self</code> in row-major …\nReturns a view over the transpose of <code>self</code> in row-major …\nReturns a view over the transpose of <code>self</code> in row-major …\nReturns a view over the transpose of <code>self</code> in column-major …\nReturns a view over the transpose of <code>self</code> in column-major …\nReturns a view over the transpose of <code>self</code> in column-major …\nReturns a view over the transpose of <code>self</code> in row-major …\nReturns a view over the transpose of <code>self</code> in column-major …\nReturns a view over the transpose of <code>self</code> in row-major …\nReturns a view over the transpose of <code>self</code> in column-major …\nReturns a view over the transpose of <code>self</code> in row-major …\nReturns a view over the transpose of <code>self</code> in column-major …\nCreate a new symbolic structure, and the corresponding …\nCreate a new symbolic structure, and the corresponding …\nCreate a new symbolic structure, and the corresponding …\nCreate a new symbolic structure, and the corresponding …\nCreate a new matrix from triplets <code>(row, col, value)</code>. …\nCreate a new matrix from triplets <code>(row, col, value)</code>. …\nCreate a new matrix from triplets <code>(row, col, value)</code>.\nCreate a new matrix from triplets <code>(row, col, value)</code>.\nUseful sparse matrix primitives.\nReturns the numerical values of the matrix.\nReturns the numerical values of the matrix.\nReturns the numerical values of the matrix.\nReturns the numerical values of the matrix.\nReturns a slice over the numerical values of the matrix.\nReturns a slice over the numerical values of the matrix.\nReturns the numerical values of the matrix.\nReturns the numerical values of the matrix.\nReturns a mutable slice over the numerical values of the …\nReturns a mutable slice over the numerical values of the …\nReturns the numerical values of column <code>j</code> of the matrix.\nReturns the numerical values of column <code>j</code> of the matrix.\nReturns the numerical values of column <code>j</code> of the matrix.\nReturns the numerical values of column <code>j</code> of the matrix.\nReturns the numerical values of column <code>j</code> of the matrix.\nReturns the numerical values of row <code>i</code> of the matrix.\nReturns the numerical values of row <code>i</code> of the matrix.\nReturns the numerical values of row <code>i</code> of the matrix.\nReturns the numerical values of row <code>i</code> of the matrix.\nReturns the numerical values of row <code>i</code> of the matrix.\nColumn of the out-of-bounds index.\nRow of the out-of-bounds index.\nDetermine automatically which variant to select.\nSparse Cholesky error.\nSimplicial factorization is always selected.\nSupernodal factorization is always selected.\nGeneric sparse error.\nGeneric sparse error.\nSparse LU error.\nMatrix is not positive definite.\nNonnegative threshold controlling when the supernodal …\nRank deficient symbolic structure.\nRank deficient symbolic structure.\nTuning parameters for the supernodal factorizations.\nApproximate minimum degree ordering.\nComputes the Cholesky decomposition (either LLT, LDLT, or …\nApproximate minimum degree column ordering.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the LU decomposition of a given sparse matrix. See\nSparse matrix multiplication.\nComputes the QR decomposition of a given sparse matrix. …\nSupernode relaxation thresholds.\nHigh level sparse solvers.\nSolving sparse triangular linear systems with a dense …\nTuning parameters for the AMD implementation.\nFlop count of the LDLT and LU factorizations if the …\nDo aggressive absorption.\n“dense” if degree &gt; dense * sqrt(n)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of division.\nNumber of multiplications and subtractions for the LDLT …\nNumber of multiplications and subtractions for the LU …\nComputes the approximate minimum degree ordering for …\nComputes the approximate minimum degree ordering for …\nComputes the size and alignment of required workspace for …\nComputes the size and alignment of required workspace for …\nApproximate minimum degree ordering. Default option.\nTuning parameters for the symbolic Cholesky factorization.\nCustom reordering.\nNo reordering.\nSparse intranodal Bunch-Kaufman factorization wrapper.\nSparse LDLT factorization wrapper.\nSparse LLT factorization wrapper.\nSimplicial structure.\nSupernodal structure.\nThe symbolic structure of a sparse Cholesky decomposition.\nThe inner factorization used for the symbolic Cholesky, …\nFill reducing ordering to use for the Cholesky …\nParameters for computing the fill-reducing permutation.\nComputes a numerical intranodal Bunch-Kaufman …\nComputes the required workspace size and alignment for a …\nComputes a numerical LDLT factorization of A.\nComputes the required workspace size and alignment for a …\nComputes a numerical LLT factorization of A, or returns a …\nComputes the required workspace size and alignment for a …\nComputes the symbolic Cholesky factorization of the matrix …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the slice needed to store the …\nReturns the number of columns of the matrix.\nCreates a new Cholesky LLT factor from the symbolic part …\nCreates new Cholesky LDLT factors from the symbolic part …\nCreates a new Cholesky intranodal Bunch-Kaufman factor …\nReturns the number of rows of the matrix.\nReturns the permutation that was computed during symbolic …\nReturns the inner type of the factorization, either …\nSimplicial factorization module.\nComputes the required workspace size and alignment for a …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSupernodal factorization module.\nThreshold for selecting the supernodal factorization.\nSupernodal factorization parameters.\nReturns the symbolic part of the Cholesky factor.\nReturns the symbolic part of the Cholesky factor.\nReturns the symbolic part of the Cholesky factor.\nReference to a slice containing the Cholesky factor’s …\nCholesky LDLT factors containing both the symbolic and …\nCholesky LLT factor containing both its symbolic and …\nCholesky factor structure containing its symbolic …\nReturns the column pointers of the Cholesky factor.\nReturns the Cholesky factor’s symbolic structure.\nComputes the numeric values of the Cholesky LDLT factors …\nReturns the size and alignment of the workspace required …\nComputes the row indices and  numeric values of the …\nComputes the numeric values of the Cholesky LLT factor of …\nReturns the size and alignment of the workspace required …\nComputes the row indices and  numeric values of the …\nComputes the symbolic structure of the Cholesky factor of …\nComputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an elimination tree reference from the underlying …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the raw elimination tree.\nReturns the length of the slice that can be used to …\nReturns the number of columns of the Cholesky factor.\nCreates a new Cholesky LLT factor from the symbolic part …\nCreates a new Cholesky LDLT factor from the symbolic part …\nReturns the number of rows of the Cholesky factor.\nComputes the elimination tree and column counts of the …\nComputes the size and alignment of the workspace required …\nReturns the row indices of the Cholesky factor.\nReturns the size and alignment of the workspace required …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nReturns the symbolic part of the Cholesky factor.\nReturns the symbolic part of the Cholesky factor.\nReturns the numerical values of the Cholesky LLT factor.\nReturns the numerical values of the Cholesky LDLT factor.\nCholesky Bunch-Kaufman factors containing both the …\nCholesky LDLT factors containing both the symbolic and …\nCholesky LLT factor containing both its symbolic and …\nA single supernode from the Cholesky factor.\nCholesky factor structure containing its symbolic …\nSymbolic structure of a single supernode from the Cholesky …\nReturns the column pointers for row indices of each …\nReturns the column pointers for numerical values of each …\nComputes the numeric values of the Cholesky Bunch-Kaufman …\nReturns the size and alignment of the workspace required …\nComputes the numeric values of the Cholesky LDLT factors …\nReturns the size and alignment of the workspace required …\nComputes the numeric values of the Cholesky LLT factor of …\nReturns the size and alignment of the workspace required …\nComputes the supernodal symbolic structure of the Cholesky …\nReturns the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSolves the equation $\\text{Op}(L) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(L^\\top) x = \\text{rhs}$ and …\nReturns the length of the slice that can be used to …\nReturns a view over the numerical values of the supernode.\nReturns the number of supernodes in the Cholesky factor.\nReturns the number of columns of the Cholesky factor.\nCreates a new Cholesky LLT factor from the symbolic part …\nCreates new Cholesky LDLT factors from the symbolic part …\nCreates a new Cholesky intranodal Bunch-Kaufman factor …\nReturns the number of rows of the Cholesky factor.\nReturns the pattern of the row indices in the supernode, …\nReturns the pattern of the row indices in the supernode, …\nReturns the row indices of the Cholesky factor.\nSolves the system $\\text{Op}(L B L^H) x = \\text{rhs}$, …\nReturns the size and alignment of the workspace required …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nReturns the starting index of the supernode.\nReturns the starting index of the supernode.\nReturns the <code>s</code>’th supernode.\nReturns the <code>s</code>’th supernode.\nReturns the <code>s</code>’th supernode.\nReturns the symbolic structure of the <code>s</code>’th supernode.\nReturns a slice of length <code>self.n_supernodes()</code> containing …\nReturns a slice of length <code>self.n_supernodes()</code> containing …\nReturns the symbolic part of the Cholesky factor.\nReturns the symbolic part of the Cholesky factor.\nReturns the symbolic part of the Cholesky factor.\nReturns the numerical values of the L factor.\nReturns the numerical values of the L factor.\nReturns the numerical values of the L factor.\nTuning parameters for the AMD implementation.\nDo aggressive absorption.\n“dense” if degree &gt; dense_col * sqrt(min(nrows, ncols))\n“dense” if degree &gt; dense_row * sqrt(ncols)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the approximate minimum degree ordering for …\nComputes the size and alignment of required workspace for …\nSparse LU factorization wrapper.\nTuning parameters for the LU symbolic factorization.\nStructure that contains the numerical values and row …\nSimplicial structure.\nSupernodal structure.\nThe symbolic structure of a sparse LU decomposition.\nThe inner factorization used for the symbolic LU, either …\nReturns the fill-reducing column permutation that was …\nReturns the fill reducing column permutation.\nParameters for the fill reducing column permutation\nComputes a numerical LU factorization of A.\nComputes the size and alignment of the workspace required …\nComputes the symbolic LU factorization of the matrix <code>A</code>, or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of columns of $A$.\nCreates a new LU of a $0\\times 0$ matrix.\nCreates LU factors from their components.\nReturns the number of rows of $A$.\nReturns the row pivoting permutation.\nSimplicial factorization module.\nComputes the size and alignment of the workspace required …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nComputes the size and alignment of the workspace required …\nSolves the equation $\\text{Op}(A^\\top) x = \\text{rhs}$ and …\nSupernodal factorization module.\nThreshold for selecting the supernodal factorization.\nSupernodal factorization parameters.\nReturns the symbolic structure of the LU factorization.\nNumber of columns of $A$.\nNumber of rows of $A$.\nLU factor structure containing the symbolic and numerical …\nComputes the numeric values of the LU factors of the …\nComputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the $L$ factor of the LU factorization. The row …\nReturns the number of columns of $A$.\nCreates a new Simplicial LU of a $0\\times 0$ matrix.\nReturns the number of rows of $A$.\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(A^\\top) x = \\text{rhs}$ and …\nReturns the $U$ factor of the LU factorization. The row …\nLU factor structure containing the symbolic and numerical …\nLU factor structure containing the symbolic structure.\nComputes the numeric values of the LU factors of the …\nComputes the size and alignment of the workspace required …\nComputes the symbolic structure of the LU factors of the …\nComputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of supernodes.\nReturns the number of columns of $A$.\nCreates a new Supernodal LU of a $0\\times 0$ matrix.\nReturns the number of rows of $A$.\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ and …\nSolves the equation $\\text{Op}(A^\\top) x = \\text{rhs}$ and …\nInfo about the matrix multiplication operation to help …\nMultiplies a dense matrix <code>lhs</code> by a sparse matrix <code>rhs</code>, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMultiplies a sparse matrix <code>lhs</code> by a dense matrix <code>rhs</code>, and …\nMultiplies a sparse matrix <code>lhs</code> by a sparse matrix <code>rhs</code>, …\nPerforms a numeric matrix multiplication of a sparse …\nComputes the size and alignment of the workspace required …\nPerforms a symbolic matrix multiplication of a sparse …\nSparse QR factorization wrapper.\nTuning parameters for the QR symbolic factorization.\nSimplicial structure.\nSupernodal structure.\nThe symbolic structure of a sparse QR decomposition.\nThe inner factorization used for the symbolic QR, either …\nComputes the column elimination tree of $A$, which is the …\nComputes the size and alignment of the workspace required …\nReturns the fill-reducing column permutation that was …\nParameters for the fill reducing column permutation\nComputes the size and alignment of the workspace required …\nComputes the column counts of the Cholesky factor of …\nComputes a numerical QR factorization of A.\nComputes the required workspace size and alignment for a …\nComputes the symbolic QR factorization of the matrix <code>A</code>, or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the slice needed to store the …\nReturns the length of the slice needed to store the …\nNumber of columns of $A$.\nCreates a QR decomposition reference from its symbolic and …\nNumber of rows of $A$.\nComputes a postordering of the elimination tree of size <code>n</code>.\nComputes the size and alignment of the workspace required …\nSimplicial factorization module.\nReturns the size and alignment of the workspace required …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ in the …\nSupernodal factorization module.\nThreshold for selecting the supernodal factorization.\nSupernodal factorization parameters.\nReturns the symbolic structure of the QR factorization.\nQR factors containing both the symbolic and numeric …\nSymbolic structure of the QR decomposition,\nComputes the size and alignment of the workspace required …\nComputes the numerical QR factorization of $A$.\nComputes the symbolic QR factorization of a matrix $A$, …\nComputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the numerical values of the Householder factors of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the slice that can be used to …\nReturns the length of the slice that can be used to …\nReturns the number of columns of the matrix $A$.\nCreates QR factors from their components.\nReturns the number of rows of the matrix $A$.\nReturns the numerical values of the factor $R$ of the QR …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ in the …\nReturns the symbolic structure of the QR factorization.\nReturns the numerical values of the $T$ factors of the QR …\nQR factors containing both the symbolic and numeric …\nSymbolic structure of the Householder reflections that …\nSymbolic structure of the QR decomposition,\nReturns the column pointers for the row indices of the …\nReturns the column pointers for the numerical values of …\nReturns the column pointers for the numerical values of …\nComputes the numerical QR factorization of $A$.\nComputes the size and alignment of the workspace required …\nComputes the symbolic QR factorization of a matrix $A$, …\nComputes the size and alignment of the workspace required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the symbolic structure of the Householder and $T$ …\nReturns the numerical values of the Householder factors of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the slice that can be used to …\nReturns the length of the slice that can be used to …\nReturns the length of the slice that can be used to …\nReturns the number of supernodes in the symbolic QR.\nCreates QR factors from their components.\nReturns the number of rows of the Householder factors.\nReturns the symbolic structure of $R^H$.\nReturns the numerical values of the factor $R$ of the QR …\nComputes the size and alignment of the workspace required …\nSolves the equation $\\text{Op}(A) x = \\text{rhs}$ in the …\nReturns the symbolic structure of the QR factorization.\nReturns the numerical values of the $T$ factors of the QR …\nSparse Cholesky factorization.\nSparse LU factorization.\nSparse QR factorization.\nSolver that can compute solution of a linear system.\nObject-safe base for <code>SpSolver</code>\nSolver that can compute the least squares solution of an …\nObject-safe base for <code>SpSolverLstsq</code>\nReference-counted sparse symbolic Cholesky factorization.\nReference-counted sparse symbolic LU factorization.\nReference-counted sparse symbolic QR factorization.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.")